/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import TestingLowerBounds.ForMathlib.EReal
import Mathlib.Analysis.Convex.Integral
import Mathlib.Analysis.Calculus.MeanValue

/-!

# Properties of convex functions

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation

## Implementation details

-/

open Real MeasureTheory Filter

open scoped ENNReal NNReal Topology BigOperators

variable {f g : ‚Ñù ‚Üí ‚Ñù} {s : Set ‚Ñù} {x : ‚Ñù}

namespace ConvexOn

lemma exists_affine_le (hf : ConvexOn ‚Ñù s f) (hs : Convex ‚Ñù s) :
    ‚àÉ c c', ‚àÄ x ‚àà s, c * x + c' ‚â§ f x := by
  sorry

lemma sSup_affine_eq (hf : ConvexOn ‚Ñù s f) (hs : Convex ‚Ñù s) (hxs : x ‚àà s) :
    sSup {z : ‚Ñù | ‚àÉ c c', z = c * x + c' ‚àß ‚àÄ y, c * y + c' ‚â§ f y} = f x := by
  sorry

lemma iSup_affine_eq (hf : ConvexOn ‚Ñù s f) (hs : Convex ‚Ñù s) (hxs : x ‚àà s) :
    ‚®Ü p : {p' : ‚Ñù √ó ‚Ñù | ‚àÄ y : ‚Ñù, p'.1 * y + p'.2 ‚â§ f y}, p.1.1 * x + p.1.2 = f x := by
  sorry

lemma slope_tendsto_atTop (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    Tendsto (fun x ‚Ü¶ f x / x) atTop atTop ‚à® ‚àÉ l, Tendsto (fun x ‚Ü¶ f x / x) atTop (ùìù l) := by
  have h_mono : ‚àÄ x y (hx : 0 < x) (hy : x ‚â§ y), (f x - f 0) / x ‚â§ (f y - f 0) / y := by
    intro x y hx_pos hxy_le
    have h := hf_cvx.secant_mono (a := 0) (x := x) (y := y) (by simp) hx_pos.le
      (hx_pos.le.trans hxy_le) hx_pos.ne' (hx_pos.trans_le hxy_le).ne' hxy_le
    simpa using h
  suffices Tendsto (fun x ‚Ü¶ if x ‚â§ 1 then (f 1 - f 0) else (f x - f 0) / x) atTop atTop
      ‚à® ‚àÉ l, Tendsto (fun x ‚Ü¶ if x ‚â§ 1 then (f 1 - f 0) else (f x - f 0) / x) atTop (ùìù l) by
    sorry
  refine tendsto_of_monotone (fun x y hxy ‚Ü¶ ?_)
  split_ifs with hx hy hy
  ¬∑ exact le_rfl
  ¬∑ simpa using h_mono 1 y zero_lt_one (not_le.mp hy).le
  ¬∑ exact absurd (hxy.trans hy) hx
  ¬∑ simpa using h_mono x y (zero_lt_one.trans (not_le.mp hx)) hxy

lemma comp_neg {ùïú F Œ≤ : Type*} [LinearOrderedField ùïú] [AddCommGroup F]
    [OrderedAddCommMonoid Œ≤] [Module ùïú F] [SMul ùïú Œ≤] {f : F ‚Üí Œ≤} {s : Set F}
    (hf : ConvexOn ùïú s f) :
    ConvexOn ùïú (-s) (fun x ‚Ü¶ f (-x)) := by
  refine ‚ü®hf.1.neg, fun x hx y hy a b ha hb hab ‚Ü¶ ?_‚ü©
  simp_rw [neg_add_rev, ‚Üê smul_neg, add_comm]
  exact hf.2 hx hy ha hb hab

lemma comp_neg_iff {ùïú F Œ≤ : Type*} [LinearOrderedField ùïú] [AddCommGroup F]
    [OrderedAddCommMonoid Œ≤] [Module ùïú F] [SMul ùïú Œ≤] {f : F ‚Üí Œ≤} {s : Set F}  :
    ConvexOn ùïú (-s) (fun x ‚Ü¶ f (-x)) ‚Üî ConvexOn ùïú s f := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ConvexOn.comp_neg h‚ü©
  rw [‚Üê neg_neg s, ‚Üê Function.comp_id f, ‚Üê neg_comp_neg, ‚Üê Function.comp.assoc]
  exact h.comp_neg

end ConvexOn
