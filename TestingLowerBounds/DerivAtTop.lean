/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import TestingLowerBounds.ForMathlib.EReal
import TestingLowerBounds.ForMathlib.LeftRightDeriv

/-!

# DerivAtTop

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation

## Implementation details

-/

open Real MeasureTheory Filter Set

open scoped ENNReal NNReal Topology

lemma EReal.tendsto_of_monotone {Œπ : Type*} [Preorder Œπ] {f : Œπ ‚Üí EReal} (hf : Monotone f) :
    ‚àÉ y, Tendsto f atTop (ùìù y) :=
  ‚ü®_, tendsto_atTop_ciSup hf (OrderTop.bddAbove _)‚ü©

lemma EReal.tendsto_of_monotoneOn {Œπ : Type*} [SemilatticeSup Œπ] [Nonempty Œπ] {x : Œπ}
    {f : Œπ ‚Üí EReal} (hf : MonotoneOn f (Ici x)) :
    ‚àÉ y, Tendsto f atTop (ùìù y) := by
  classical
  suffices ‚àÉ y, Tendsto (fun z ‚Ü¶ if x ‚â§ z then f z else f x) atTop (ùìù y) by
    obtain ‚ü®y, hy‚ü© := this
    refine ‚ü®y, ?_‚ü©
    refine (tendsto_congr' ?_).mp hy
    rw [EventuallyEq, eventually_atTop]
    exact ‚ü®x, fun z hz ‚Ü¶ if_pos hz‚ü©
  refine EReal.tendsto_of_monotone (fun y z hyz ‚Ü¶ ?_)
  split_ifs with hxy hxz hxz
  ¬∑ exact hf hxy hxz hyz
  ¬∑ exact absurd (hxy.trans hyz) hxz
  ¬∑ exact hf le_rfl hxz hxz
  ¬∑ exact le_rfl

lemma Real.monotone_toEReal : Monotone toEReal := Monotone.of_map_inf fun _ ‚Ü¶ congrFun rfl

variable {Œ± Œ≤ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤}
  {Œº ŒΩ : Measure Œ±} {f g : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù}

lemma ite_bot_ae_eq_atTop (f : ‚Ñù ‚Üí EReal) :
    (fun x ‚Ü¶ if 1 ‚â§ x then f x else ‚ä•) =·∂†[atTop] f := by
  rw [Filter.EventuallyEq, eventually_atTop]
  exact ‚ü®1, fun x hx ‚Ü¶ by simp [hx]‚ü©

-- The constant 1 chosen here is an arbitrary number greater than 0.
lemma MonotoneOn.monotone_ite_bot (hf : MonotoneOn (rightDeriv f) (Ioi 0)) :
    Monotone (fun x ‚Ü¶ if 1 ‚â§ x then (rightDeriv f x : EReal) else ‚ä•) := by
  intro x y hxy
  cases le_or_lt 1 x with
  | inl hx =>
    simp only [hx, hx.trans hxy, ‚ÜìreduceIte]
    norm_cast
    exact (hf.mono (Ici_subset_Ioi.mpr zero_lt_one)) hx (hx.trans hxy) hxy
  | inr hx =>
    simp only [not_le.mpr hx, ‚ÜìreduceIte, bot_le]

/-- Limsup of the right derivative at infinity. -/
noncomputable
def derivAtTop (f : ‚Ñù ‚Üí ‚Ñù) : EReal := limsup (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop

lemma derivAtTop_congr (h : f =·∂†[atTop] g) : derivAtTop f = derivAtTop g := by
  simp_rw [derivAtTop]
  refine limsup_congr ?_
  filter_upwards [rightDeriv_congr_atTop h] with x hx
  rw [hx]

lemma derivAtTop_congr_nonneg (h : ‚àÄ x, 0 ‚â§ x ‚Üí f x = g x) : derivAtTop f = derivAtTop g := by
  refine derivAtTop_congr ?_
  rw [Filter.EventuallyEq, eventually_atTop]
  exact ‚ü®0, h‚ü©

lemma derivAtTop_eq_limsup_extendBotLtOne :
    derivAtTop f = limsup (fun x ‚Ü¶ if 1 ‚â§ x then (rightDeriv f x : EReal) else ‚ä•) atTop := by
  refine limsup_congr ?_
  filter_upwards [ite_bot_ae_eq_atTop (fun x ‚Ü¶ (rightDeriv f x : EReal))] with x hx
  rw [hx]

lemma tendsto_extendBotLtOne_rightDeriv_iff {y : EReal} :
    Tendsto (fun x ‚Ü¶ if 1 ‚â§ x then (rightDeriv f x : EReal) else ‚ä•) atTop (ùìù y)
      ‚Üî Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù y) := by
  refine tendsto_congr' ?_
  filter_upwards [ite_bot_ae_eq_atTop (fun x ‚Ü¶ (rightDeriv f x : EReal))] with x hx
  rw [hx]

lemma derivAtTop_of_tendsto {y : EReal}
    (h : Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù y)) :
    derivAtTop f = y := h.limsup_eq

lemma derivAtTop_of_tendsto_nhds {y : ‚Ñù} (h : Tendsto (rightDeriv f) atTop (ùìù y)) :
    derivAtTop f = y :=
  derivAtTop_of_tendsto ((continuous_coe_real_ereal.tendsto _).comp h)

lemma derivAtTop_of_tendsto_atTop (h : Tendsto (rightDeriv f) atTop atTop) :
    derivAtTop f = ‚ä§ := by
  refine derivAtTop_of_tendsto ?_
  rw [EReal.tendsto_nhds_top_iff_real]
  simp only [EReal.coe_lt_coe_iff, eventually_atTop, ge_iff_le]
  rw [tendsto_atTop_atTop] at h
  intro x
  obtain ‚ü®a, ha‚ü© := h (x + 1)
  exact ‚ü®a, fun b hab ‚Ü¶ (lt_add_one _).trans_le (ha b hab)‚ü©

@[simp]
lemma derivAtTop_zero : derivAtTop 0 = 0 := by
  refine derivAtTop_of_tendsto_nhds ?_
  simp only [rightDeriv_zero]
  exact tendsto_const_nhds

@[simp]
lemma derivAtTop_const (c : ‚Ñù) : derivAtTop (fun _ ‚Ü¶ c) = 0 := by
  refine derivAtTop_of_tendsto_nhds ?_
  simp only [rightDeriv_const]
  exact tendsto_const_nhds

@[simp] lemma derivAtTop_id : derivAtTop id = 1 := derivAtTop_of_tendsto_nhds (by simp)

@[simp] lemma derivAtTop_id' : derivAtTop (fun x ‚Ü¶ x) = 1 := derivAtTop_id

lemma MonotoneOn.tendsto_derivAtTop (hf : MonotoneOn (rightDeriv f) (Ioi 0)) :
    Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù (derivAtTop f)) := by
  have hf_coe : MonotoneOn (fun x ‚Ü¶ (rightDeriv f x : EReal)) (Ici 1) :=
    Real.monotone_toEReal.comp_monotoneOn (hf.mono (Ici_subset_Ioi.mpr zero_lt_one))
  obtain ‚ü®z, hz‚ü© : ‚àÉ z, Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù z) :=
    EReal.tendsto_of_monotoneOn hf_coe
  rwa [derivAtTop_of_tendsto hz]

lemma ConvexOn.tendsto_derivAtTop (hf : ConvexOn ‚Ñù (Ici 0) f) :
    Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù (derivAtTop f)) :=
  hf.rightDeriv_mono'.tendsto_derivAtTop

lemma MonotoneOn.derivAtTop_eq_iff {y : EReal} (hf : MonotoneOn (rightDeriv f) (Ioi 0)) :
    derivAtTop f = y ‚Üî Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù y) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ derivAtTop_of_tendsto h‚ü©
  have h_tendsto := hf.tendsto_derivAtTop
  rwa [h] at h_tendsto

lemma ConvexOn.derivAtTop_eq_iff {y : EReal} (hf : ConvexOn ‚Ñù (Ici 0) f) :
    derivAtTop f = y ‚Üî Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù y) :=
  hf.rightDeriv_mono'.derivAtTop_eq_iff

lemma MonotoneOn.derivAtTop_eq_top_iff (hf : MonotoneOn (rightDeriv f) (Ioi 0)) :
    derivAtTop f = ‚ä§ ‚Üî Tendsto (rightDeriv f) atTop atTop := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ derivAtTop_of_tendsto_atTop h‚ü©
  exact EReal.tendsto_toReal_atTop.comp (tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _
    (h ‚ñ∏ hf.tendsto_derivAtTop) (.of_forall fun _ ‚Ü¶ EReal.coe_ne_top _))

lemma ConvexOn.derivAtTop_eq_top_iff (hf : ConvexOn ‚Ñù (Ici 0) f) :
    derivAtTop f = ‚ä§ ‚Üî Tendsto (rightDeriv f) atTop atTop :=
  hf.rightDeriv_mono'.derivAtTop_eq_top_iff

lemma MonotoneOn.derivAtTop_ne_bot (hf : MonotoneOn (rightDeriv f) (Ioi 0)) : derivAtTop f ‚â† ‚ä• := by
  intro h_eq
  rw [hf.derivAtTop_eq_iff, ‚Üê tendsto_extendBotLtOne_rightDeriv_iff] at h_eq
  have h_le := hf.monotone_ite_bot.ge_of_tendsto h_eq 1
  simp at h_le

lemma ConvexOn.derivAtTop_ne_bot (hf : ConvexOn ‚Ñù (Ici 0) f) : derivAtTop f ‚â† ‚ä• :=
  hf.rightDeriv_mono'.derivAtTop_ne_bot

lemma MonotoneOn.tendsto_toReal_derivAtTop (hf : MonotoneOn (rightDeriv f) (Ioi 0))
    (h_top : derivAtTop f ‚â† ‚ä§) :
    Tendsto (rightDeriv f) atTop (ùìù (derivAtTop f).toReal) := by
  have h_tendsto : Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal)) atTop (ùìù (derivAtTop f)) :=
    hf.tendsto_derivAtTop
  have h_toReal : rightDeriv f = fun x ‚Ü¶ (rightDeriv f x : EReal).toReal := by ext; simp
  rw [h_toReal]
  exact (EReal.tendsto_toReal h_top hf.derivAtTop_ne_bot).comp h_tendsto

lemma ConvexOn.tendsto_toReal_derivAtTop (hf : ConvexOn ‚Ñù (Ici 0) f) (h_top : derivAtTop f ‚â† ‚ä§) :
    Tendsto (rightDeriv f) atTop (ùìù (derivAtTop f).toReal) :=
  hf.rightDeriv_mono'.tendsto_toReal_derivAtTop h_top

lemma derivAtTop_add' (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) (hg_cvx : ConvexOn ‚Ñù (Ici 0) g) :
    derivAtTop (f + g) = derivAtTop f + derivAtTop g := by
  rw [(hf_cvx.add hg_cvx).derivAtTop_eq_iff]
  suffices Tendsto (fun x ‚Ü¶ (rightDeriv f x : EReal) + ‚Üë(rightDeriv g x)) atTop
      (ùìù (derivAtTop f + derivAtTop g)) by
    refine (tendsto_congr' ?_).mp this
    rw [EventuallyEq, eventually_atTop]
    refine ‚ü®1, fun x hx ‚Ü¶ ?_‚ü©
    change _ = ‚Üë(rightDeriv (fun x ‚Ü¶ f x + g x) x)
    rw [rightDeriv_add_apply' (hf_cvx.differentiableWithinAt_Ioi' (zero_lt_one.trans_le hx))
        (hg_cvx.differentiableWithinAt_Ioi' (zero_lt_one.trans_le hx))]
    simp only [EReal.coe_add]
  have h_cont : ContinuousAt (fun p : (EReal √ó EReal) ‚Ü¶ p.1 + p.2) (derivAtTop f, derivAtTop g) :=
    EReal.continuousAt_add (p := (derivAtTop f, derivAtTop g)) (Or.inr hg_cvx.derivAtTop_ne_bot)
      (Or.inl hf_cvx.derivAtTop_ne_bot)
  change Tendsto ((fun p : (EReal √ó EReal) ‚Ü¶ p.1 + p.2)
      ‚àò (fun x ‚Ü¶ (‚Üë(rightDeriv f x), ‚Üë(rightDeriv g x))))
    atTop (ùìù (derivAtTop f + derivAtTop g))
  exact h_cont.tendsto.comp (hf_cvx.tendsto_derivAtTop.prod_mk_nhds hg_cvx.tendsto_derivAtTop)

lemma derivAtTop_add (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) (hg_cvx : ConvexOn ‚Ñù (Ici 0) g) :
    derivAtTop (fun x ‚Ü¶ f x + g x) = derivAtTop f + derivAtTop g := derivAtTop_add' hf_cvx hg_cvx

lemma derivAtTop_add_const (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) (c : ‚Ñù) :
    derivAtTop (fun x ‚Ü¶ f x + c) = derivAtTop f :=
  (derivAtTop_add' hf_cvx (convexOn_const _ (convex_Ici 0))).trans (by simp)

lemma derivAtTop_const_add (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) (c : ‚Ñù) :
    derivAtTop (fun x ‚Ü¶ c + f x) = derivAtTop f :=
  (derivAtTop_add' (convexOn_const _ (convex_Ici 0)) hf_cvx).trans (by simp)

lemma derivAtTop_sub_const (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) (c : ‚Ñù) :
    derivAtTop (fun x ‚Ü¶ f x - c) = derivAtTop f := by
  simp_rw [sub_eq_add_neg]
  exact derivAtTop_add_const hf_cvx _

lemma derivAtTop_const_mul (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) {c : ‚Ñù} (hc : c ‚â† 0) :
    derivAtTop (fun x ‚Ü¶ c * f x) = c * derivAtTop f := by
  refine derivAtTop_of_tendsto ?_
  simp only [rightDeriv_const_mul, EReal.coe_mul]
  have h_cont : ContinuousAt (fun p : (EReal √ó EReal) ‚Ü¶ p.1 * p.2) (‚Üëc, derivAtTop f) :=
    EReal.continuousAt_mul (p := (c, derivAtTop f)) (Or.inr hf_cvx.derivAtTop_ne_bot)
      (Or.inl ?_) (Or.inl (by simp)) (Or.inl (by simp))
  swap; ¬∑ simp only [ne_eq, EReal.coe_eq_zero]; exact hc
  change Tendsto ((fun p : (EReal √ó EReal) ‚Ü¶ p.1 * p.2) ‚àò (fun x ‚Ü¶ (‚Üëc, ‚Üë(rightDeriv f x))))
    atTop (ùìù (‚Üëc * derivAtTop f))
  exact h_cont.tendsto.comp (tendsto_const_nhds.prod_mk_nhds hf_cvx.tendsto_derivAtTop)

lemma slope_le_rightDeriv (h_cvx : ConvexOn ‚Ñù (Ici 0) f) {x y : ‚Ñù} (hx : 0 ‚â§ x) (hxy : x < y) :
    (f y - f x) / (y - x) ‚â§ rightDeriv f y := by
  rw [h_cvx.rightDeriv_eq_sInf_slope' (hx.trans_lt hxy)]
  refine le_csInf nonempty_of_nonempty_subtype (fun b hb ‚Ü¶ ?_)
  obtain ‚ü®z, hyz, rfl‚ü© := hb
  simp only [mem_Ioi] at hyz
  rw [‚Üê slope_def_field, slope_comm]
  refine h_cvx.slope_mono (hx.trans hxy.le) ?_ ?_ (hxy.trans hyz).le
  ¬∑ simp only [mem_diff, mem_Ici, mem_singleton_iff]
    exact ‚ü®hx, hxy.ne‚ü©
  ¬∑ simp only [mem_diff, mem_Ici, mem_singleton_iff]
    exact ‚ü®(hx.trans hxy.le).trans hyz.le, hyz.ne'‚ü©

lemma rightDeriv_le_toReal_derivAtTop (h_cvx : ConvexOn ‚Ñù (Ici 0) f) (h : derivAtTop f ‚â† ‚ä§)
    (hx : 0 < x) :
    rightDeriv f x ‚â§ (derivAtTop f).toReal := by
  have h_tendsto := h_cvx.tendsto_toReal_derivAtTop h
  refine ge_of_tendsto h_tendsto ?_
  rw [eventually_atTop]
  refine ‚ü®max 1 x, fun y hy ‚Ü¶ h_cvx.rightDeriv_mono' hx ?_ ?_‚ü©
  ¬∑ exact mem_Ioi.mpr (hx.trans_le ((le_max_right _ _).trans hy))
  ¬∑ exact (le_max_right _ _).trans hy

lemma rightDeriv_le_derivAtTop (h_cvx : ConvexOn ‚Ñù (Ici 0) f) (hx : 0 < x) :
    rightDeriv f x ‚â§ derivAtTop f := by
  by_cases h : derivAtTop f = ‚ä§
  ¬∑ exact h ‚ñ∏ le_top
  ¬∑ rw [‚Üê EReal.coe_toReal h h_cvx.derivAtTop_ne_bot, EReal.coe_le_coe_iff]
    exact rightDeriv_le_toReal_derivAtTop h_cvx h hx

lemma slope_le_derivAtTop (h_cvx : ConvexOn ‚Ñù (Ici 0) f)
    (h : derivAtTop f ‚â† ‚ä§) {x y : ‚Ñù} (hx : 0 ‚â§ x) (hxy : x < y) :
    (f y - f x) / (y - x) ‚â§ (derivAtTop f).toReal :=
  (slope_le_rightDeriv h_cvx hx hxy).trans
    (rightDeriv_le_toReal_derivAtTop h_cvx h (hx.trans_lt hxy))

lemma le_add_derivAtTop (h_cvx : ConvexOn ‚Ñù (Ici 0) f)
    (h : derivAtTop f ‚â† ‚ä§) {x y : ‚Ñù} (hy : 0 ‚â§ y) (hyx : y ‚â§ x) :
    f x ‚â§ f y + (derivAtTop f).toReal * (x - y) := by
  cases eq_or_lt_of_le hyx with
  | inl h_eq => simp [h_eq]
  | inr h_lt =>
    have h_le := slope_le_derivAtTop h_cvx h hy h_lt
    rwa [div_le_iff‚ÇÄ, sub_le_iff_le_add'] at h_le
    simp [h_lt]

lemma le_add_derivAtTop'' (h_cvx : ConvexOn ‚Ñù (Ici 0) f)
    (h : derivAtTop f ‚â† ‚ä§) {x y : ‚Ñù} (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) :
    f (x + y) ‚â§ f x + (derivAtTop f).toReal * y := by
  have h_le := le_add_derivAtTop h_cvx h hx (x := x + y) ?_
  ¬∑ simpa using h_le
  ¬∑ linarith

lemma le_add_derivAtTop' (h_cvx : ConvexOn ‚Ñù (Ici 0) f)
    (h : derivAtTop f ‚â† ‚ä§) {x u : ‚Ñù} (hx : 0 ‚â§ x) (hu : 0 ‚â§ u) (hu' : u ‚â§ 1) :
    f x ‚â§ f (x * u) + (derivAtTop f).toReal * x * (1 - u) := by
  by_cases hx0 : x = 0
  ¬∑ simp [hx0]
  have h := le_add_derivAtTop h_cvx h (mul_nonneg hx hu) (x := x) ?_
  swap;
  ¬∑ rwa [mul_le_iff_le_one_right]
    exact hx.lt_of_ne' hx0
  rwa [mul_assoc, mul_sub, mul_one]

lemma toReal_le_add_derivAtTop (hf_cvx : ConvexOn ‚Ñù (Ici 0) f) {a b : ENNReal}
    (ha : a ‚â† ‚ä§) (hb : b ‚â† ‚ä§) :
    f ((a + b).toReal) ‚â§ f a.toReal + derivAtTop f * b := by
  by_cases hf_top : derivAtTop f = ‚ä§
  ¬∑ rw [hf_top]
    by_cases hb_zero : b = 0
    ¬∑ simp [hb_zero]
    ¬∑ rw [EReal.top_mul_ennreal_coe hb_zero, EReal.coe_add_top]
      exact le_top
  ¬∑ have h_le : a.toReal ‚â§ (a + b).toReal := by
      gcongr
      ¬∑ simp [ha, hb]
      ¬∑ simp
    have h := le_add_derivAtTop hf_cvx hf_top (ENNReal.toReal_nonneg : 0 ‚â§ a.toReal) h_le
    lift derivAtTop f to ‚Ñù using ‚ü®hf_top, hf_cvx.derivAtTop_ne_bot‚ü© with df
    rw [‚Üê EReal.coe_ennreal_toReal hb]
    norm_cast
    refine h.trans_eq ?_
    congr
    rw [sub_eq_iff_eq_add, ‚Üê ENNReal.toReal_add hb ha, add_comm]
