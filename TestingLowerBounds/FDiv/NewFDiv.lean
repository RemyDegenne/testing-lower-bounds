/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Lorenzo Luccioli
-/
import TestingLowerBounds.Divergences.fDivStatInfo

/-!

# Test: alternative f-divergence definition

-/

open Real MeasureTheory Filter Set MeasurableSpace

open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} {m mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤}
  {Œº ŒΩ : Measure Œ±} {f g : ‚Ñù ‚Üí ‚Ñù}

noncomputable
def rightLimZero (f : ‚Ñù ‚Üí ‚Ñù) : EReal := (fun x ‚Ü¶ (f x : EReal)).rightLim 0

lemma rightLimZero_of_tendsto (h : Tendsto f (ùìù[>] 0) (ùìù (f 0))) :
    rightLimZero f = f 0 := rightLim_eq_of_tendsto NeBot.ne' (EReal.tendsto_coe.mpr h)

lemma rightLimZero_of_tendsto_atTop (h : Tendsto f (ùìù[>] 0) atTop) :
    rightLimZero f = ‚ä§ := by
  refine rightLim_eq_of_tendsto NeBot.ne' ?_
  rw [EReal.tendsto_nhds_top_iff_real]
  rw [tendsto_atTop] at h
  intro x
  filter_upwards [h (x + 1)] with y hy
  norm_cast
  exact (lt_add_one x).trans_le hy

open Classical in
/-- f-Divergence of two measures. -/
noncomputable
def fDiv' (f : ‚Ñù ‚Üí ‚Ñù) (Œº ŒΩ : Measure Œ±) : EReal :=
  if ¬¨ IntegrableOn (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) (ŒΩ.singularPartSet Œº)·∂ú ŒΩ then ‚ä§
  else ‚à´ x in (ŒΩ.singularPartSet Œº)·∂ú, f (Œº.rnDeriv ŒΩ x).toReal ‚àÇŒΩ
    + derivAtTop f * Œº.singularPart ŒΩ .univ + rightLimZero f * ŒΩ.singularPart Œº univ

lemma integrableOn_f_rnDeriv_singularPartSet_iff [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    IntegrableOn (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) (ŒΩ.singularPartSet Œº) ŒΩ
      ‚Üî f 0 = 0 ‚à® ŒΩ (ŒΩ.singularPartSet Œº) < ‚ä§ := by
  have h := Measure.rnDeriv_eq_zero_ae_of_singularPartSet ŒΩ Œº ŒΩ
  have h' : ‚àÄ·µê (x : Œ±) ‚àÇŒΩ, x ‚àà ŒΩ.singularPartSet Œº ‚Üí f ((‚àÇŒº/‚àÇŒΩ) x).toReal = f 0 := by
    filter_upwards [h] with x hx h_mem
    rw [hx h_mem, ENNReal.zero_toReal]
  rw [‚Üê ae_restrict_iff' Measure.measurableSet_singularPartSet] at h'
  rw [integrableOn_congr_fun_ae h']
  by_cases h0 : f 0 = 0 <;> simp [h0]

lemma integrableOn_and_compl [NormedAddCommGroup Œ≤] {f : Œ± ‚Üí Œ≤} (s : Set Œ±) {Œº : Measure Œ±} :
    IntegrableOn f s Œº ‚àß IntegrableOn f s·∂ú Œº ‚Üî Integrable f Œº := by
  rw [‚Üê integrableOn_union, ‚Üê integrableOn_univ, union_compl_self]

lemma fDiv'_eq_fDiv [SigmaFinite Œº] [SigmaFinite ŒΩ] (hfc : ContinuousOn f (Ici 0)) :
    fDiv' f Œº ŒΩ = fDiv f Œº ŒΩ := by
  have h_zero : rightLimZero f = f 0 := by
    refine rightLimZero_of_tendsto ?_
    have h_tendsto_ge : Tendsto f (ùìù[‚â•] 0) (ùìù (f 0)) := (hfc 0 (mem_Ici.mpr le_rfl)).tendsto
    exact tendsto_nhdsWithin_mono_left (Ioi_subset_Ici le_rfl) h_tendsto_ge
  by_cases h_int : Integrable (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) ŒΩ
  swap
  ¬∑ rw [fDiv_of_not_integrable h_int, fDiv']
    rw [‚Üê integrableOn_and_compl (ŒΩ.singularPartSet Œº)] at h_int
    split_ifs with h
    ¬∑ rw [integrableOn_f_rnDeriv_singularPartSet_iff] at h_int
      simp only [h, and_true, not_or, not_lt, top_le_iff] at h_int
      rw [‚Üê Measure.measure_singularPartSet' ŒΩ Œº, h_int.2, EReal.coe_ennreal_top]
      rw [h_zero, EReal.coe_mul_top_of_pos]
      swap; ¬∑ sorry
      rw [EReal.add_top_of_ne_bot]
      simp only [ne_eq, EReal.add_eq_bot_iff, EReal.coe_ne_bot, false_or]
      rw [EReal.mul_eq_bot]
      simp only [EReal.coe_ennreal_pos, Measure.measure_univ_pos, ne_eq, EReal.coe_ennreal_ne_bot,
        and_false, EReal.coe_ennreal_eq_top_iff, false_or, not_or, not_and, not_not, not_lt]
      sorry
    ¬∑ rfl
  rw [fDiv', if_neg, h_zero]
  swap; ¬∑ push_neg; exact h_int.integrableOn
  rw [fDiv_of_integrable h_int]
  suffices ((‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ : ‚Ñù) : EReal)
      = ‚à´ x in (ŒΩ.singularPartSet Œº)·∂ú, f (Œº.rnDeriv ŒΩ x).toReal ‚àÇŒΩ
        + f 0 * ŒΩ.singularPart Œº .univ by
    rw [this, add_assoc, add_assoc]
    congr 1
    rw [add_comm]
  rw [‚Üê integral_add_compl (Measure.measurableSet_singularPartSet (Œº := ŒΩ) (ŒΩ := Œº)) h_int,
    add_comm, EReal.coe_add]
  congr
  have h := Measure.rnDeriv_eq_zero_ae_of_singularPartSet ŒΩ Œº ŒΩ
  have h' : ‚àÄ·µê (x : Œ±) ‚àÇŒΩ, x ‚àà ŒΩ.singularPartSet Œº ‚Üí f ((‚àÇŒº/‚àÇŒΩ) x).toReal = f 0 := by
    filter_upwards [h] with x hx h_mem
    rw [hx h_mem, ENNReal.zero_toReal]
  rw [‚Üê Measure.measure_singularPartSet' ŒΩ Œº,
    setIntegral_congr_ae Measure.measurableSet_singularPartSet h']
  simp only [integral_const, MeasurableSet.univ, Measure.restrict_apply, univ_inter, smul_eq_mul,
    EReal.coe_mul]
  rw [mul_comm]
  by_cases h0 : f 0 = 0
  ¬∑ simp [h0]
  congr
  refine EReal.coe_ennreal_toReal ?_
  have h_int' : IntegrableOn (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) (ŒΩ.singularPartSet Œº) ŒΩ :=
    h_int.integrableOn
  rw [‚Üê ae_restrict_iff' Measure.measurableSet_singularPartSet] at h'
  rw [integrableOn_congr_fun_ae h'] at h_int'
  simp only [integrableOn_const, h0, false_or] at h_int'
  exact h_int'.ne

end ProbabilityTheory
