/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import TestingLowerBounds.FDiv.DivFunction

/-!

# f-Divergences functions

-/

open Real MeasureTheory Filter Set MeasurableSpace

open scoped ENNReal NNReal Topology

namespace ConvexOn

lemma nonneg_of_todo {f : ‚Ñù ‚Üí ‚Ñù} (hf : ConvexOn ‚Ñù (Ioi 0) f)
    (hf_one : f 1 = 0) (hf_deriv : rightDeriv f 1 = 0) {x : ‚Ñù} (hx : 0 ‚â§ x) :
    0 ‚â§ f x := by
  calc 0
  _ = rightDeriv f 1 * x + (f 1 - rightDeriv f 1 * 1) := by simp [hf_one, hf_deriv]
  _ ‚â§ f x := hf.affine_le_of_mem_interior sorry sorry

lemma nonneg_of_todo' {f : ‚Ñù ‚Üí ‚Ñù} (hf : ConvexOn ‚Ñù (Ioi 0) f)
    (hf_one : f 1 = 0) (hf_ld : leftDeriv f 1 ‚â§ 0) (hf_rd : 0 ‚â§ rightDeriv f 1)
    {x : ‚Ñù} (hx : 0 ‚â§ x) :
    0 ‚â§ f x := by
  sorry

lemma leftDeriv_nonpos_of_isMinOn {f : ‚Ñù ‚Üí ‚Ñù} {s : Set ‚Ñù} (hf : ConvexOn ‚Ñù s f) {x‚ÇÄ : ‚Ñù}
    (hf_one : IsMinOn f s x‚ÇÄ) (h_mem : x‚ÇÄ ‚àà interior s) :
    leftDeriv f x‚ÇÄ ‚â§ 0 := by
  sorry

lemma rightDeriv_nonneg_of_isMinOn {f : ‚Ñù ‚Üí ‚Ñù} {s : Set ‚Ñù} (hf : ConvexOn ‚Ñù s f) {x‚ÇÄ : ‚Ñù}
    (hf_one : IsMinOn f s x‚ÇÄ) (h_mem : x‚ÇÄ ‚àà interior s) :
    0 ‚â§ rightDeriv f x‚ÇÄ := by
  sorry

end ConvexOn

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤} {Œº ŒΩ : Measure Œ±}
  {f : ‚Ñù ‚Üí ‚Ñù}

namespace DivFunction

section OfReal

/-- Build a `DivFunction` from a function `f : ‚Ñù ‚Üí ‚Ñù` which is convex on `Ioi 0` and satisfies
`f 1 = 0` and `leftDeriv f 1 ‚â§ 0`, `0 ‚â§ rightDeriv f 1`. -/
noncomputable
def ofReal (f : ‚Ñù ‚Üí ‚Ñù) (hf : ConvexOn ‚Ñù (Ioi 0) f)
    (hf_one : f 1 = 0) (hf_ld : leftDeriv f 1 ‚â§ 0) (hf_rd : 0 ‚â§ rightDeriv f 1) : DivFunction where
  toFun x :=
    -- give values at 0 and ‚àû to ensure continuity
    if x = 0 then Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0
    else if x = ‚àû then limsup (fun x ‚Ü¶ ENNReal.ofReal (f x)) atTop
    else ENNReal.ofReal (f x.toReal)
  one := by simp [hf_one]
  leftDerivOne := by
    simp only [ENNReal.ofReal_eq_zero, ENNReal.ofReal_ne_top, ‚ÜìreduceIte]
    have : leftDeriv (fun x ‚Ü¶
          (if x ‚â§ 0 then Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0
            else ENNReal.ofReal (f (ENNReal.ofReal x).toReal)).toReal) 1
        = leftDeriv f 1 := by
      refine leftDeriv_congr ?_ ?_
      ¬∑ have h_forall : ‚àÄ·∂† x in ùìù[<] (1 : ‚Ñù), 0 < x :=
          eventually_nhdsWithin_of_eventually_nhds (eventually_gt_nhds zero_lt_one)
        filter_upwards [h_forall] with x hx
        rw [if_neg (not_le.mpr hx), ENNReal.toReal_ofReal hx.le, ENNReal.toReal_ofReal]
        exact hf.nonneg_of_todo' hf_one hf_ld hf_rd hx.le
      ¬∑ simp [not_le.mpr zero_lt_one, hf_one]
    rw [this]
    exact hf_ld
  rightDerivOne := by
    simp only [ENNReal.ofReal_eq_zero, ENNReal.ofReal_ne_top, ‚ÜìreduceIte]
    have : rightDeriv (fun x ‚Ü¶
          (if x ‚â§ 0 then Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0
            else ENNReal.ofReal (f (ENNReal.ofReal x).toReal)).toReal) 1
        = rightDeriv f 1 := by
      refine rightDeriv_congr ?_ ?_
      ¬∑ have h_forall : ‚àÄ·∂† x in ùìù[>] (1 : ‚Ñù), 0 < x :=
          eventually_nhdsWithin_of_eventually_nhds (eventually_gt_nhds zero_lt_one)
        filter_upwards [h_forall] with x hx
        rw [if_neg (not_le.mpr hx), ENNReal.toReal_ofReal hx.le, ENNReal.toReal_ofReal]
        exact hf.nonneg_of_todo' hf_one hf_ld hf_rd hx.le
      ¬∑ simp [not_le.mpr zero_lt_one, hf_one]
    rw [this]
    exact hf_rd
  convexOn' := sorry
  continuous' := sorry

variable {hf : ConvexOn ‚Ñù (Ioi 0) f} {hf_one : f 1 = 0}
  {hf_ld : leftDeriv f 1 ‚â§ 0} {hf_rd : 0 ‚â§ rightDeriv f 1}

section OfRealApply

@[simp]
lemma ofReal_apply_zero :
    ofReal f hf hf_one hf_ld hf_rd 0 = Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0 := by
  simp [ofReal]

lemma ofReal_apply_zero_of_continuousWithinAt (hf_cont : ContinuousWithinAt f (Ioi 0) 0) :
    ofReal f hf hf_one hf_ld hf_rd 0 = ENNReal.ofReal (f 0) := by
  simp only [ofReal_apply_zero]
  refine rightLim_eq_of_tendsto NeBot.ne' ?_
  refine ContinuousWithinAt.tendsto ?_
  exact (ENNReal.continuous_ofReal.tendsto _).comp hf_cont.tendsto

@[simp]
lemma ofReal_apply_top :
    ofReal f hf hf_one hf_ld hf_rd ‚àû = limsup (fun x ‚Ü¶ ENNReal.ofReal (f x)) atTop := by
  simp [ofReal]

lemma ofReal_apply {x : ‚Ñù‚â•0‚àû} (hx_zero : x ‚â† 0) (hx_top : x ‚â† ‚àû) :
    ofReal f hf hf_one hf_ld hf_rd x = ENNReal.ofReal (f x.toReal) := by
  simp [ofReal, hx_zero, hx_top]

lemma ofReal_apply_of_continuousWithinAt (hf_cont : ContinuousWithinAt f (Ioi 0) 0)
    {x : ‚Ñù‚â•0‚àû} (hx : x ‚â† ‚àû) :
    ofReal f hf hf_one hf_ld hf_rd x = ENNReal.ofReal (f x.toReal) := by
  by_cases hx0 : x = 0
  ¬∑ simp [hx0, ofReal_apply_zero_of_continuousWithinAt hf_cont]
  ¬∑ exact ofReal_apply hx0 hx

lemma realFun_ofReal_apply {x : ‚Ñù} (hx : 0 < x) :
    (ofReal f hf hf_one hf_ld hf_rd).realFun x = f x := by
  rw [realFun, ofReal_apply, ENNReal.toReal_ofReal, ENNReal.toReal_ofReal hx.le]
  ¬∑ exact hf.nonneg_of_todo' hf_one hf_ld hf_rd ENNReal.toReal_nonneg
  ¬∑ simp [hx]
  ¬∑ simp

end OfRealApply

section DerivAtTop

lemma derivAtTop_ofReal :
    (ofReal f hf hf_one hf_ld hf_rd).derivAtTop
      = limsup (fun x ‚Ü¶ ENNReal.ofReal (rightDeriv f x)) atTop := by
  sorry

lemma derivAtTop_ofReal_of_tendsto_atTop (h : Tendsto (rightDeriv f) atTop atTop) :
    (ofReal f hf hf_one hf_ld hf_rd).derivAtTop = ‚àû := by
  sorry

end DerivAtTop

section Integral

lemma lintegral_ofReal_eq_top_of_not_integrable [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (h_int : ¬¨ Integrable (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) ŒΩ) :
    ‚à´‚Åª x, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ = ‚àû := by
  refine lintegral_eq_top_of_not_integrable_realFun ?_
  suffices ¬¨ IntegrableOn
      (fun x ‚Ü¶ (ofReal f hf hf_one hf_ld hf_rd).realFun (Œº.rnDeriv ŒΩ x).toReal)
      {x | Œº.rnDeriv ŒΩ x ‚â† 0} ŒΩ from
    fun h ‚Ü¶ this h.integrableOn
  rw [‚Üê integrableOn_univ] at h_int
  have : (univ : Set Œ±) = {x | Œº.rnDeriv ŒΩ x ‚â† 0} ‚à™ {x | Œº.rnDeriv ŒΩ x = 0} :=
    (compl_union_self _).symm
  rw [this, integrableOn_union] at h_int
  have h_int_zero : IntegrableOn (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) {x | Œº.rnDeriv ŒΩ x = 0} ŒΩ := by
    refine (integrableOn_congr_fun ?_ ?_).mpr
      ((integrableOn_const (C := f 0)).mpr (.inr (measure_lt_top _ _)))
    ¬∑ intro x hx
      simp only [mem_setOf_eq] at hx
      simp [hx]
    ¬∑ exact Œº.measurable_rnDeriv ŒΩ (measurableSet_singleton 0)
  simp [h_int_zero] at h_int
  convert h_int using 1
  refine integrableOn_congr_fun_ae ((ae_restrict_iff' ?_).mpr ?_)
  ¬∑ exact (Œº.measurable_rnDeriv ŒΩ (measurableSet_singleton 0)).compl
  filter_upwards [Œº.rnDeriv_ne_top ŒΩ] with x hx_top hx_zero
  rw [DivFunction.realFun_ofReal_apply]
  exact ENNReal.toReal_pos hx_zero hx_top

lemma lintegral_ofReal' [SigmaFinite Œº] [SigmaFinite ŒΩ] (hŒºŒΩ : Œº ‚â™ ŒΩ)
    (h : ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} ‚â† ‚àû) :
    ‚à´‚Åª x, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ‚à´‚Åª x, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ
        - ENNReal.ofReal (f 0) * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0}
        + Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0 * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} := by
  let s := {x | Œº.rnDeriv ŒΩ x = 0}
  have hs : MeasurableSet s := Œº.measurable_rnDeriv ŒΩ (measurableSet_singleton 0)
  rw [‚Üê lintegral_add_compl _ hs]
  have hs_zero : ‚àÄ x ‚àà s, Œº.rnDeriv ŒΩ x = 0 := fun _ hx ‚Ü¶ hx
  have h1 : ‚à´‚Åª x in s, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0 * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} := by
    have : ‚àÄ x ‚àà s, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x)
        = Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0 := by
      intro x hx
      simp [hs_zero x hx]
    rw [setLIntegral_congr_fun hs (ae_of_all _ this)]
    simp
  have h2 : ‚à´‚Åª x in s·∂ú, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ‚à´‚Åª x in s·∂ú, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ := by
    have h_ne_top := Œº.rnDeriv_ne_top ŒΩ
    sorry
  have h3 : ‚à´‚Åª x in s, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ
      = ENNReal.ofReal (f 0) * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} := by
    have : ‚àÄ x ‚àà s, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal)
        = ENNReal.ofReal (f 0) := by
      intro x hx
      simp [hs_zero x hx]
    rw [setLIntegral_congr_fun hs (ae_of_all _ this)]
    simp
  rw [h1, h2, ‚Üê h3]
  conv_rhs => rw [‚Üê lintegral_add_compl _ hs (Œº := ŒΩ), add_comm]
  congr 1
  rw [h3, ENNReal.add_sub_cancel_left]
  exact ENNReal.mul_ne_top ENNReal.ofReal_ne_top h

lemma lintegral_ofReal [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    ‚à´‚Åª x, DivFunction.ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ‚à´‚Åª x, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ
        - ENNReal.ofReal (f 0) * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0}
        + Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x)) 0 * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} :=
  DivFunction.lintegral_ofReal' hŒºŒΩ (measure_ne_top _ _)

lemma lintegral_ofReal_of_continuous [SigmaFinite Œº] [SigmaFinite ŒΩ]
    (hf_cont : ContinuousWithinAt f (Ioi 0) 0) :
    ‚à´‚Åª x, DivFunction.ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ‚à´‚Åª x, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ := by
  let s := {x | Œº.rnDeriv ŒΩ x = 0}
  have hs : MeasurableSet s := Œº.measurable_rnDeriv ŒΩ (measurableSet_singleton 0)
  rw [‚Üê lintegral_add_compl _ hs, ‚Üê lintegral_add_compl _ hs (Œº := ŒΩ)]
  have hs_zero : ‚àÄ x ‚àà s, Œº.rnDeriv ŒΩ x = 0 := fun _ hx ‚Ü¶ hx
  have h1 : ‚à´‚Åª x in s, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ENNReal.ofReal (f 0) * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} := by
    have : ‚àÄ x ‚àà s, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) = ENNReal.ofReal (f 0) := by
      intro x hx
      rw [hs_zero x hx, ofReal_apply_zero_of_continuousWithinAt hf_cont]
    rw [setLIntegral_congr_fun hs (ae_of_all _ this)]
    simp
  have h2 : ‚à´‚Åª x in s·∂ú, ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ‚à´‚Åª x in s·∂ú, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ := by
    have h_ne_top := Œº.rnDeriv_ne_top ŒΩ
    sorry
  have h3 : ‚à´‚Åª x in s, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) ‚àÇŒΩ
      = ENNReal.ofReal (f 0) * ŒΩ {x | Œº.rnDeriv ŒΩ x = 0} := by
    have : ‚àÄ x ‚àà s, ENNReal.ofReal (f (Œº.rnDeriv ŒΩ x).toReal) = ENNReal.ofReal (f 0) := by
      intro x hx
      simp [hs_zero x hx]
    rw [setLIntegral_congr_fun hs (ae_of_all _ this)]
    simp
  rw [h1, h2, h3]

lemma lintegral_ofReal_eq_integral_of_continuous [SigmaFinite Œº] [SigmaFinite ŒΩ]
    (hf_cont : ContinuousWithinAt f (Ioi 0) 0)
    (h_int : Integrable (fun x ‚Ü¶ f (Œº.rnDeriv ŒΩ x).toReal) ŒΩ) :
    ‚à´‚Åª x, DivFunction.ofReal f hf hf_one hf_ld hf_rd (Œº.rnDeriv ŒΩ x) ‚àÇŒΩ
      = ENNReal.ofReal (‚à´ x, f (Œº.rnDeriv ŒΩ x).toReal ‚àÇŒΩ) := by
  rw [DivFunction.lintegral_ofReal_of_continuous hf_cont,
    ofReal_integral_eq_lintegral_ofReal h_int]
  refine ae_of_all _ fun x ‚Ü¶ ?_
  suffices ‚àÄ x, 0 ‚â§ x ‚Üí 0 ‚â§ f x from this _ ENNReal.toReal_nonneg
  exact fun _ ‚Ü¶ hf.nonneg_of_todo' hf_one hf_ld hf_rd

end Integral

end OfReal

noncomputable
abbrev ofRealOfNonneg (f : ‚Ñù ‚Üí ‚Ñù) (hf : ConvexOn ‚Ñù (Ioi 0) f)
    (hf_one : f 1 = 0) (hf_nonneg : ‚àÄ x, 0 < x ‚Üí 0 ‚â§ f x) : DivFunction :=
  ofReal f hf hf_one
    (hf.leftDeriv_nonpos_of_isMinOn (fun x hx ‚Ü¶ by simp [hf_one, hf_nonneg x hx]) (by simp))
    (hf.rightDeriv_nonneg_of_isMinOn (fun x hx ‚Ü¶ by simp [hf_one, hf_nonneg x hx]) (by simp))

section OfConvexOn

lemma _root_.ConvexOn.sub_one (hf : ConvexOn ‚Ñù (Ioi 0) f) :
    ConvexOn ‚Ñù (Ioi 0) fun x ‚Ü¶ f x - f 1 - rightDeriv f 1 * (x - 1) := by
  have h_eq x : f x - f 1 - rightDeriv f 1 * (x - 1)
      = f x + (- rightDeriv f 1) * x + (- f 1 + rightDeriv f 1) := by ring
  simp_rw [h_eq, add_assoc]
  refine hf.add ?_
  refine ConvexOn.add ?_ (convexOn_const _ (convex_Ioi _))
  exact (ConvexOn.const_mul_id _).subset (subset_univ _) (convex_Ioi _)

lemma rightDeriv_sub_one (hf : DifferentiableWithinAt ‚Ñù f (Ioi 1) 1) :
    rightDeriv (fun x ‚Ü¶ f x - f 1 - rightDeriv f 1 * (x - 1)) 1 = 0 := by
  have h_eq x : f x - f 1 - rightDeriv f 1 * (x - 1)
      = f x + (- rightDeriv f 1) * x + (- f 1 + rightDeriv f 1) := by ring
  simp_rw [h_eq]
  rw [rightDeriv_add_const_apply, rightDeriv_add_linear_apply hf]
  ¬∑ ring
  ¬∑ exact hf.add ((differentiableWithinAt_const _).mul differentiableWithinAt_id)

lemma _root_.ConvexOn.rightDeriv_sub_one (hf : ConvexOn ‚Ñù (Ioi 0) f) :
    rightDeriv (fun x ‚Ü¶ f x - f 1 - rightDeriv f 1 * (x - 1)) 1 = 0 :=
  DivFunction.rightDeriv_sub_one (hf.differentiableWithinAt_Ioi_of_mem_interior (by simp))

-- todo: give a default value 0 when f is not convex?
/-- Build a `DivFunction` from a function `f : ‚Ñù ‚Üí ‚Ñù` which is convex on `Ioi 0`. -/
noncomputable
def ofConvexOn (f : ‚Ñù ‚Üí ‚Ñù) (hf : ConvexOn ‚Ñù (Ioi 0) f) : DivFunction :=
  ofReal (fun x ‚Ü¶ f x - f 1 - rightDeriv f 1 * (x - 1)) hf.sub_one (by simp)
    (by
      refine (hf.sub_one.leftDeriv_le_rightDeriv_of_mem_interior ?_).trans hf.rightDeriv_sub_one.le
      simp only [interior_Ioi, mem_Ioi, zero_lt_one])
    hf.rightDeriv_sub_one.symm.le

section OfConvexOnApply

variable {hf : ConvexOn ‚Ñù (Ioi 0) f}

@[simp]
lemma ofConvexOn_apply_zero :
    ofConvexOn f hf 0
      = Function.rightLim (fun x ‚Ü¶ ENNReal.ofReal (f x - f 1 - rightDeriv f 1 * (x - 1))) 0 := by
  simp [ofConvexOn]

lemma ofConvexOn_apply_zero_of_continuousWithinAt (hf_cont : ContinuousWithinAt f (Ioi 0) 0) :
    ofConvexOn f hf 0 = ENNReal.ofReal (f 0 - f 1 + rightDeriv f 1) := by
  rw [ofConvexOn, ofReal_apply_zero_of_continuousWithinAt]
  ¬∑ simp
  ¬∑ simp_rw [‚Üê sub_add_eq_sub_sub]
    refine hf_cont.sub ?_
    sorry

@[simp]
lemma ofConvexOn_apply_top :
    ofConvexOn f hf ‚àû
      = limsup (fun x ‚Ü¶ ENNReal.ofReal (f x - f 1 - rightDeriv f 1 * (x - 1))) atTop := by
  simp [ofConvexOn]

lemma ofConvexOn_apply {x : ‚Ñù‚â•0‚àû} (hx_zero : x ‚â† 0) (hx_top : x ‚â† ‚àû) :
    ofConvexOn f hf x = ENNReal.ofReal (f x.toReal - f 1 - rightDeriv f 1 * (x.toReal - 1)) := by
  simp [ofConvexOn, ofReal_apply, hx_zero, hx_top]

end OfConvexOnApply

end OfConvexOn

variable {f g : DivFunction}

section DerivAtTop

lemma derivAtTop_ofConvexOn {f : ‚Ñù ‚Üí ‚Ñù} {hf : ConvexOn ‚Ñù (Ioi 0) f} :
    (ofConvexOn f hf).derivAtTop
      = limsup (fun x ‚Ü¶ ENNReal.ofReal (rightDeriv f x - rightDeriv f 1)) atTop := by
  rw [ofConvexOn, derivAtTop_ofReal]
  sorry

lemma derivAtTop_ofConvexOn_of_tendsto_atTop {f : ‚Ñù ‚Üí ‚Ñù} {hf : ConvexOn ‚Ñù (Ioi 0) f}
    (h : Tendsto (rightDeriv f) atTop atTop) :
    (ofConvexOn f hf).derivAtTop = ‚àû := by
  rw [ofConvexOn, derivAtTop_ofReal_of_tendsto_atTop]
  sorry

end DerivAtTop

end DivFunction

variable {f : DivFunction}

end ProbabilityTheory
