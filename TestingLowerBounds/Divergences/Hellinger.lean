/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Lorenzo Luccioli
-/
import TestingLowerBounds.Divergences.KullbackLeibler
import Mathlib.Analysis.Convex.SpecificFunctions.Pow

/-!
# Helliger divergence

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation



## Implementation details

-/

open Real MeasureTheory Filter MeasurableSpace

open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

--TODO: try to add these attributes to fun_prop? how to do this?
attribute [fun_prop] Measure.measurable_rnDeriv Measurable.ennreal_toReal
variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº ŒΩ : Measure Œ±} {a : ‚Ñù}

-- todo: rename and move.
lemma integral_rpow_rnDeriv (ha_pos : 0 < a) (ha : a ‚â† 1) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ = ‚à´ x, ((‚àÇŒΩ/‚àÇŒº) x).toReal ^ (1 - a) ‚àÇŒº := by
  let p := ‚àÇŒº/‚àÇ(Œº + ŒΩ)
  let q := ‚àÇŒΩ/‚àÇ(Œº + ŒΩ)
  calc ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ
    = ‚à´ x, ((p/q) x).toReal ^ a ‚àÇŒΩ := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_eq_div Œº ŒΩ] with x hx
        simp only [hx, Pi.div_apply, p, q]
  _ = ‚à´ x, (q x).toReal * ((p/q) x).toReal ^ a ‚àÇ(Œº + ŒΩ) := by
        rw [‚Üê integral_rnDeriv_smul (_ : ŒΩ ‚â™ Œº + ŒΩ)]
        ¬∑ simp
        ¬∑ rw [add_comm]
          exact Measure.AbsolutelyContinuous.rfl.add_right Œº
  _ = ‚à´ x, (p x).toReal * ((q/p) x).toReal ^ (1 - a) ‚àÇ(Œº + ŒΩ) := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_lt_top Œº (Œº + ŒΩ), Measure.rnDeriv_lt_top ŒΩ (Œº + ŒΩ)]
          with x hp_top hq_top
        by_cases hp : p x = 0
        ¬∑ simp [hp, ha_pos.ne']
        by_cases hq : q x = 0
        ¬∑ simp only [hq, ENNReal.zero_toReal, Pi.div_apply, zero_mul, ENNReal.zero_div,
            zero_eq_mul, le_refl]
          refine Or.inr ?_
          rw [zero_rpow]
          rwa [ne_eq, sub_eq_zero, Eq.comm]
        simp only [Pi.div_apply, ENNReal.toReal_div, div_eq_mul_inv, ENNReal.toReal_mul,
          mul_rpow ENNReal.toReal_nonneg (inv_nonneg.mpr ENNReal.toReal_nonneg), ENNReal.toReal_inv,
          inv_rpow ENNReal.toReal_nonneg, ‚Üê rpow_neg ENNReal.toReal_nonneg, neg_sub]
        rw [mul_comm, mul_assoc, mul_comm _ ((p x).toReal ^ (a - 1)), ‚Üê mul_assoc (p x).toReal]
        congr
        ¬∑ have : a = 1 + (a - 1) := by abel
          conv_lhs => rw [this]
          rw [rpow_add, rpow_one]
          rw [ENNReal.toReal_pos_iff]
          exact ‚ü®zero_le'.lt_of_ne' hp, hp_top‚ü©
        ¬∑ rw [mul_comm, rpow_sub, rpow_one, rpow_neg ENNReal.toReal_nonneg, div_eq_mul_inv]
          rw [ENNReal.toReal_pos_iff]
          exact ‚ü®zero_le'.lt_of_ne' hq, hq_top‚ü©
  _ = ‚à´ x, ((q/p) x).toReal ^ (1 - a) ‚àÇŒº := by
        rw [‚Üê integral_rnDeriv_smul (_ : Œº ‚â™ Œº + ŒΩ)]
        ¬∑ simp
        ¬∑ exact Measure.AbsolutelyContinuous.rfl.add_right ŒΩ
  _ = ‚à´ x, ((‚àÇŒΩ/‚àÇŒº) x).toReal ^ (1 - a) ‚àÇŒº := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_eq_div ŒΩ Œº] with x hx
        rw [add_comm] at hx
        simp only [hx, Pi.div_apply, p, q]

lemma integrable_rpow_rnDeriv_iff [SigmaFinite ŒΩ] [SigmaFinite Œº] (hŒºŒΩ : Œº ‚â™ ŒΩ) (ha : 0 < a) :
    Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ (1 + a)) ŒΩ := by
  rw [‚Üê integrable_rnDeriv_smul_iff hŒºŒΩ]
  refine integrable_congr ?_
  filter_upwards [Measure.rnDeriv_ne_top Œº ŒΩ] with x hx
  simp only [smul_eq_mul]
  by_cases h_zero : Œº.rnDeriv ŒΩ x = 0
  ¬∑ simp only [h_zero, ENNReal.zero_toReal, zero_mul]
    rw [zero_rpow]
    linarith
  ¬∑ rw [rpow_add (ENNReal.toReal_pos h_zero hx), rpow_one]

lemma integral_fun_rnDeriv_eq_zero_iff_mutuallySingular [SigmaFinite Œº] [SigmaFinite ŒΩ]
    {f : ENNReal ‚Üí ‚Ñù} (hf_nonneg : ‚àÄ x, 0 ‚â§ f x) (hf_zero : ‚àÄ x, f x = 0 ‚Üî x = 0 ‚à® x = ‚ä§)
    (h_int : Integrable (f ‚àò (‚àÇŒº/‚àÇŒΩ)) ŒΩ) :
    ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x) ‚àÇŒΩ = 0 ‚Üî Œº ‚üÇ‚Çò ŒΩ := by
  rw [‚Üê Measure.rnDeriv_eq_zero, integral_eq_zero_iff_of_nonneg (fun _ ‚Ü¶ hf_nonneg _) h_int]
  apply Filter.eventually_congr
  filter_upwards [Measure.rnDeriv_ne_top Œº ŒΩ] with x hx
  simp only [Pi.zero_apply, hf_zero, hx, or_false]

lemma integral_rpow_rnDeriv_eq_zero_iff_mutuallySingular [SigmaFinite Œº] [SigmaFinite ŒΩ]
    (ha_zero : a ‚â† 0) (h_int : Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ) :
    ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ = 0 ‚Üî Œº ‚üÇ‚Çò ŒΩ := by
  have h_nonneg : ‚àÄ (x : ENNReal), 0 ‚â§ x.toReal ^ a := by
    intro x
    simp only [Pi.zero_apply, ENNReal.toReal_nonneg, rpow_nonneg]
  refine integral_fun_rnDeriv_eq_zero_iff_mutuallySingular h_nonneg (fun x ‚Ü¶ ?_) h_int
  rw [rpow_eq_zero ENNReal.toReal_nonneg ha_zero, ENNReal.toReal_eq_zero_iff]

lemma integral_rpow_rnDeriv_pos_iff_not_mutuallySingular [SigmaFinite Œº] [SigmaFinite ŒΩ]
    (ha_zero : a ‚â† 0) (h_int : Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ) :
    0 < ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ ‚Üî ¬¨ Œº ‚üÇ‚Çò ŒΩ := by
  rw [‚Üê integral_rpow_rnDeriv_eq_zero_iff_mutuallySingular ha_zero h_int]
  push_neg
  have h_nonneg : 0 ‚â§ ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ := by
    apply integral_nonneg
    intro x
    simp only [Pi.zero_apply, ENNReal.toReal_nonneg, rpow_nonneg]
  exact LE.le.gt_iff_ne h_nonneg

section HellingerFun

/--Hellinger function, defined as `x ‚Ü¶ (a - 1)‚Åª¬π * (x ^ a - 1)` for `a ‚àà (0, 1) ‚à™ (1, + ‚àû)`.
At `0` the function is obtained by contiuity and is the indicator function of `{0}`. At `1` it is
defined as `x ‚Ü¶ x * log x`, because in this way we obtain that the Hellinger divergence at `1`
conincides with the KL divergence, which is natural for continuity reasons.-/
noncomputable
def hellingerFun (a : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù :=
  if a = 0 then fun x ‚Ü¶ if x = 0 then 1 else 0
  else if a = 1 then fun x ‚Ü¶ x * log x
  else fun x ‚Ü¶ (a - 1)‚Åª¬π * (x ^ a - 1)

lemma hellingerFun_zero : hellingerFun 0 = fun x ‚Ü¶ if x = 0 then 1 else 0 := by
  ext x
  simp [hellingerFun]

lemma hellingerFun_zero' : hellingerFun 0 = fun x ‚Ü¶ 0 ^ x := by
  ext x
  by_cases h : x = 0 <;> simp [hellingerFun, h]

lemma hellingerFun_zero'' : hellingerFun 0 = Set.indicator {0} 1 := by
  ext x
  by_cases h : x = 0 <;> simp [hellingerFun_zero, h]

lemma hellingerFun_one : hellingerFun 1 = fun x ‚Ü¶ x * log x := by
  ext x
  simp [hellingerFun]

lemma hellingerFun_of_ne_zero_of_ne_one (ha_zero : a ‚â† 0) (ha_one : a ‚â† 1) :
    hellingerFun a = fun x ‚Ü¶ (a - 1)‚Åª¬π * (x ^ a - 1) := by
  ext x
  simp [hellingerFun, ha_zero, ha_one]

lemma continuous_rpow_const (ha_nonneg : 0 ‚â§ a) : Continuous fun (x : ‚Ñù) ‚Ü¶ x ^ a := by
  rw [continuous_iff_continuousAt]
  exact fun _ ‚Ü¶ continuousAt_rpow_const _ _ (Or.inr ha_nonneg)

lemma continuous_hellingerFun (ha_pos : 0 < a) : Continuous (hellingerFun a) := by
  by_cases ha_eq : a = 1
  ¬∑ rw [ha_eq, hellingerFun_one]
    simp [Real.continuous_mul_log]
  rw [hellingerFun, if_neg ha_pos.ne', if_neg ha_eq]
  exact continuous_const.mul ((continuous_rpow_const ha_pos.le).sub continuous_const)

lemma stronglyMeasurable_hellingerFun (ha_nonneg : 0 ‚â§ a) :
    StronglyMeasurable (hellingerFun a) := by
  cases  (lt_or_eq_of_le ha_nonneg) with
  | inl ha_pos => exact (continuous_hellingerFun ha_pos).stronglyMeasurable
  | inr ha_eq =>
    rw [‚Üê ha_eq, hellingerFun_zero'']
    measurability

@[simp]
lemma hellingerFun_apply_one_eq_zero : hellingerFun a 1 = 0 := by
  by_cases ha_one : a = 1
  ¬∑ simp [ha_one, hellingerFun_one]
  by_cases ha_zero : a = 0
  ¬∑ simp [ha_zero, hellingerFun_zero]
  simp [hellingerFun, ha_one, ha_zero]

lemma hellingerFun_apply_zero : hellingerFun a 0 = (1 - a)‚Åª¬π := by
  by_cases ha_zero : a = 0
  ¬∑ simp [ha_zero, hellingerFun_zero]
  by_cases ha_one : a = 1
  ¬∑ simp [ha_one, hellingerFun_one]
  simp [hellingerFun, ha_zero, ha_one, neg_inv]

lemma convexOn_hellingerFun (ha_pos : 0 ‚â§ a) : ConvexOn ‚Ñù (Set.Ici 0) (hellingerFun a) := by
  by_cases ha_zero : a = 0
  ¬∑ refine convexOn_iff_slope_mono_adjacent.mpr ?_
    simp only [convex_Ici, Set.mem_Ici, smul_eq_mul, true_and, hellingerFun_zero, ha_zero]
    intro x y z hx _ hxy hyz
    simp only [(lt_of_le_of_lt hx hxy).ne', ‚ÜìreduceIte, zero_sub,
      (gt_trans hyz <| lt_of_le_of_lt hx hxy).ne', sub_self, zero_div, div_nonpos_iff,
      Left.nonneg_neg_iff, tsub_le_iff_right, zero_add, Left.neg_nonpos_iff, sub_nonneg]
    right
    exact ‚ü®by positivity, by linarith‚ü©
  replace ha_pos := ha_pos.lt_of_ne fun h ‚Ü¶ ha_zero h.symm
  rcases (lt_trichotomy a 1) with (ha | ha | ha)
  ¬∑ have : hellingerFun a = - (fun x ‚Ü¶ (1 - a)‚Åª¬π ‚Ä¢ (x ^ a - 1)) := by
      ext x
      simp only [Pi.neg_apply]
      rw [hellingerFun_of_ne_zero_of_ne_one ha_pos.ne' ha.ne, smul_eq_mul, ‚Üê neg_mul, neg_inv, neg_sub]
    rw [this]
    refine ConcaveOn.neg ?_
    exact ((Real.concaveOn_rpow ha_pos.le ha.le).sub (convexOn_const _ (convex_Ici 0))).smul
      (by simp [ha.le])
  ¬∑ simp only [hellingerFun, ha, one_ne_zero, ‚ÜìreduceIte]
    exact convexOn_mul_log
  ¬∑ have h := convexOn_rpow ha.le
    unfold hellingerFun
    simp_rw [‚Üê smul_eq_mul, if_neg ha_pos.ne', if_neg ha.ne']
    refine ConvexOn.smul (by simp [ha.le]) ?_
    exact h.sub (concaveOn_const _ (convex_Ici 0))

lemma tendsto_hellingerFun_div_atTop_of_one_lt (ha : 1 < a) :
    Tendsto (fun x ‚Ü¶ hellingerFun a x / x) atTop atTop := by
  sorry

lemma tendsto_hellingerFun_div_atTop_of_lt_one (ha : a < 1) :
    Tendsto (fun x ‚Ü¶ hellingerFun a x / x) atTop (ùìù 0) := by
  sorry

lemma derivAtTop_hellingerFun_of_one_lt (ha : 1 < a) : derivAtTop (hellingerFun a) = ‚ä§ := by
  rw [derivAtTop, if_pos]
  exact tendsto_hellingerFun_div_atTop_of_one_lt ha

lemma derivAtTop_hellingerFun_of_one_le (ha : 1 ‚â§ a) :
    derivAtTop (hellingerFun a) = ‚ä§ := by
  by_cases ha_eq : a = 1
  ¬∑ simp only [hellingerFun, ha, ha_eq, one_ne_zero, ‚ÜìreduceIte]
    exact derivAtTop_mul_log
  ¬∑ exact derivAtTop_hellingerFun_of_one_lt <| lt_of_le_of_ne ha fun ha ‚Ü¶ ha_eq ha.symm

lemma derivAtTop_hellingerFun_of_lt_one (ha : a < 1) :
    derivAtTop (hellingerFun a) = 0 :=
  derivAtTop_of_tendsto (tendsto_hellingerFun_div_atTop_of_lt_one ha)

lemma integrable_hellingerFun_iff_integrable_rpow (ha_one : a ‚â† 1) [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
      ‚Üî Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ := by
  by_cases ha_zero : a = 0
  ¬∑ simp_rw [ha_zero, hellingerFun_zero'', rpow_zero, integrable_const, iff_true,
      ‚Üê Set.indicator_comp_right fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal, Set.preimage, Set.mem_singleton_iff,
      Pi.one_comp]
    refine (integrable_indicator_iff ?_).mpr ?_
    . apply measurableSet_eq_fun <;> fun_prop
    . apply integrableOn_const.mpr
      right
      exact measure_lt_top ŒΩ _
  rw [hellingerFun_of_ne_zero_of_ne_one ha_zero ha_one, integrable_const_mul_iff]
  swap; ¬∑ simp [sub_eq_zero, ha_one]
  simp_rw [sub_eq_add_neg, integrable_add_const_iff]

lemma integrable_hellingerFun_zero [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ hellingerFun 0 ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  simp_rw [integrable_hellingerFun_iff_integrable_rpow zero_ne_one, rpow_zero]
  exact integrable_const _

lemma integrable_hellingerFun_rnDeriv_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  refine integrable_f_rnDeriv_of_derivAtTop_ne_top Œº ŒΩ ?_ ?_ ?_
  ¬∑ exact stronglyMeasurable_hellingerFun ha_nonneg
  ¬∑ exact convexOn_hellingerFun ha_nonneg
  ¬∑ rw [derivAtTop_hellingerFun_of_lt_one ha]
    exact EReal.zero_ne_top

lemma integrable_rpow_rnDeriv_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1) [IsFiniteMeasure Œº]
    [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ := by
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha.ne]
  exact integrable_hellingerFun_rnDeriv_of_lt_one ha_nonneg ha

end HellingerFun

/-- Hellinger divergence of order `a`.
The cases `a = 0` and `a = 1` are defined separately inside the definition of the Hellinger
function, so that in the case `a = 0` we have `hellingerDiv 0 Œº ŒΩ = ŒΩ {x | (‚àÇŒº/‚àÇŒΩ) x = 0}`, and in
the case `a = 1` the Hellinger divergence coincides with the KL divergence. -/
noncomputable def hellingerDiv (a : ‚Ñù) (Œº ŒΩ : Measure Œ±) : EReal := fDiv (hellingerFun a) Œº ŒΩ

lemma hellingerDiv_zero (Œº ŒΩ : Measure Œ±) :
    hellingerDiv 0 Œº ŒΩ = ŒΩ {x | ((‚àÇŒº/‚àÇŒΩ) x).toReal = 0} := by
  have h_eq : (fun x ‚Ü¶ Set.indicator {0} 1 (Œº.rnDeriv ŒΩ x).toReal)
      = {y | ((‚àÇŒº/‚àÇŒΩ) y).toReal = 0}.indicator (1 : Œ± ‚Üí ‚Ñù) := by
    simp_rw [‚Üê Set.indicator_comp_right fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal, Set.preimage,
      Set.mem_singleton_iff, Pi.one_comp]
  have h_meas : MeasurableSet {y | (Œº.rnDeriv ŒΩ y).toReal = 0} := by
    apply measurableSet_eq_fun <;> fun_prop
  by_cases h_int : Integrable (fun x ‚Ü¶ hellingerFun 0 (Œº.rnDeriv ŒΩ x).toReal) ŒΩ
  swap
  ¬∑ rw [hellingerDiv, fDiv_of_not_integrable h_int]
    rw [hellingerFun_zero'', h_eq, integrable_indicator_iff h_meas] at h_int
    have := integrableOn_const.mpr.mt h_int
    simp only [not_or, not_lt, top_le_iff] at this
    rw [this.2, EReal.coe_ennreal_top]
  rw [hellingerDiv, fDiv_of_integrable h_int, hellingerFun_zero'', h_eq, ‚Üê hellingerFun_zero'',
    derivAtTop_hellingerFun_of_lt_one zero_lt_one, zero_mul, add_zero,
    integral_indicator_one h_meas]
  rw [hellingerFun_zero'', h_eq, integrable_indicator_iff h_meas, Pi.one_def] at h_int
  apply integrableOn_const.mp at h_int
  simp only [one_ne_zero, false_or] at h_int
  exact EReal.coe_ennreal_toReal h_int.ne_top

lemma hellingerDiv_zero' (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] :
    hellingerDiv 0 Œº ŒΩ = ŒΩ {x | (‚àÇŒº/‚àÇŒΩ) x = 0} := by
  rw [hellingerDiv_zero]
  norm_cast
  refine measure_congr <| eventuallyEq_set.mpr ?_
  filter_upwards [Measure.rnDeriv_lt_top Œº ŒΩ] with x hx
  simp [ENNReal.toReal_eq_zero_iff, hx.ne]

lemma hellingerDiv_zero'' (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv 0 Œº ŒΩ = ŒΩ Set.univ - ŒΩ {x | 0 < (‚àÇŒº/‚àÇŒΩ) x} := by
  have h : {x | Œº.rnDeriv ŒΩ x = 0} = {x | 0 < Œº.rnDeriv ŒΩ x}·∂ú := by
    ext x
    simp only [Set.mem_setOf_eq, Set.mem_compl_iff, not_lt, nonpos_iff_eq_zero, eq_comm]
  rw [hellingerDiv_zero', h, measure_compl
    (measurableSet_lt measurable_const (Measure.measurable_rnDeriv _ _)) (measure_ne_top _ _),
    ENNReal.toEReal_sub (measure_ne_top _ _) (measure_mono _)]
  exact fun _ _ ‚Ü¶ trivial

lemma hellingerDiv_zero_toReal (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] :
    (hellingerDiv 0 Œº ŒΩ).toReal = (ŒΩ Set.univ).toReal - (ŒΩ {x | 0 < (‚àÇŒº/‚àÇŒΩ) x}).toReal := by
  rw [hellingerDiv_zero'']
  rw [EReal.toReal_sub]
  all_goals simp [measure_ne_top]

lemma hellingerDiv_zero_ne_top (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    hellingerDiv 0 Œº ŒΩ ‚â† ‚ä§ := by
  rw [hellingerDiv_zero, ne_eq, EReal.coe_ennreal_eq_top_iff]
  exact measure_ne_top _ _

@[simp] lemma hellingerDiv_one (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv 1 Œº ŒΩ = kl Œº ŒΩ := by
  rw [hellingerDiv, hellingerFun_one, kl_eq_fDiv]

@[simp]
lemma hellingerDiv_zero_measure_left (ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    hellingerDiv a 0 ŒΩ = (1 - a)‚Åª¬π * ŒΩ Set.univ := by
  rw [hellingerDiv, fDiv_zero_measure, hellingerFun_apply_zero]

@[simp]
lemma hellingerDiv_zero_measure_right_of_lt_one (ha : a < 1) (Œº : Measure Œ±) :
    hellingerDiv a Œº 0 = 0 := by
  rw [hellingerDiv, fDiv_zero_measure_right, derivAtTop_hellingerFun_of_lt_one ha, zero_mul]

@[simp]
lemma hellingerDiv_zero_measure_right_of_one_le (ha : 1 ‚â§ a) (Œº : Measure Œ±) [hŒº : NeZero Œº] :
    hellingerDiv a Œº 0 = ‚ä§ := by
  rw [hellingerDiv, fDiv_zero_measure_right, derivAtTop_hellingerFun_of_one_le ha,
    EReal.top_mul_of_pos]
  simp [hŒº.out]

section HellingerEq

/--If `a ‚â§ 1` use `hellingerDiv_eq_integral_of_integrable_of_le_one` or
`hellingerDiv_eq_integral_of_le_one`, as they have fewer hypotheses.-/
lemma hellingerDiv_eq_integral_of_integrable_of_ac
    (h_int : Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) (h_ac : 1 ‚â§ a ‚Üí Œº ‚â™ ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := by
  rw [hellingerDiv, fDiv_of_integrable h_int]
  rcases (le_or_gt 1 a) with ha | ha
  ¬∑ rw [Measure.singularPart_eq_zero_of_ac <| h_ac ha]
    norm_num
  ¬∑ rw [derivAtTop_hellingerFun_of_lt_one ha]
    norm_num

lemma hellingerDiv_eq_integral_of_integrable_of_lt_one (ha : a < 1)
    (h_int : Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ :=
  hellingerDiv_eq_integral_of_integrable_of_ac h_int ha.not_le.elim

lemma hellingerDiv_eq_integral_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ :=
  hellingerDiv_eq_integral_of_integrable_of_ac
    (integrable_hellingerFun_rnDeriv_of_lt_one ha_nonneg ha) ha.not_le.elim

lemma hellingerDiv_of_not_integrable
    (h : ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚ä§ :=
  fDiv_of_not_integrable h

lemma hellingerDiv_of_one_lt_not_ac (ha : 1 ‚â§ a) (h_ac : ¬¨ Œº ‚â™ ŒΩ) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§ :=
  fDiv_of_not_ac (derivAtTop_hellingerFun_of_one_le ha) h_ac

lemma hellingerDiv_eq_top_iff (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚à® (1 ‚â§ a ‚àß ¬¨ Œº ‚â™ ŒΩ) := by
  constructor
  ¬∑ contrapose!
    rintro ‚ü®h_int, h_ac‚ü©
    rw [hellingerDiv_eq_integral_of_integrable_of_ac h_int h_ac]
    exact EReal.coe_ne_top _
  ¬∑ rintro (h | ‚ü®ha, h_ac‚ü©)
    ¬∑ exact hellingerDiv_of_not_integrable h
    ¬∑ exact hellingerDiv_of_one_lt_not_ac ha h_ac

lemma hellingerDiv_ne_top_iff (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§
      ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß (1 ‚â§ a ‚Üí Œº ‚â™ ŒΩ) := by
  rw [ne_eq, hellingerDiv_eq_top_iff]
  push_neg
  rfl

lemma hellingerDiv_eq_top_iff_of_one_le (ha : 1 ‚â§ a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚à® ¬¨ Œº ‚â™ ŒΩ := by
  rw [hellingerDiv_eq_top_iff, and_iff_right ha]

lemma hellingerDiv_ne_top_iff_of_one_le (ha : 1 ‚â§ a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§
      ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß Œº ‚â™ ŒΩ := by
  rw [ne_eq, hellingerDiv_eq_top_iff_of_one_le ha]
  push_neg
  rfl

lemma hellingerDiv_eq_top_iff_of_one_lt (ha : 1 < a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ ‚à® ¬¨ Œº ‚â™ ŒΩ := by
  rw [hellingerDiv_eq_top_iff_of_one_le ha.le, integrable_hellingerFun_iff_integrable_rpow ha.ne']

lemma hellingerDiv_ne_top_iff_of_one_lt (ha : 1 < a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§
      ‚Üî Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ ‚àß Œº ‚â™ ŒΩ := by
  rw [hellingerDiv_ne_top_iff_of_one_le ha.le, integrable_hellingerFun_iff_integrable_rpow ha.ne']

lemma hellingerDiv_eq_top_iff_of_lt_one (ha : a < 1) (Œº ŒΩ : Measure Œ±) :
    hellingerDiv a Œº ŒΩ = ‚ä§ ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  refine ‚ü®?_, fun h ‚Ü¶ hellingerDiv_of_not_integrable h‚ü©
  contrapose!
  rintro h_int
  rw [hellingerDiv_eq_integral_of_integrable_of_lt_one ha h_int]
  exact EReal.coe_ne_top _

lemma hellingerDiv_ne_top_iff_of_lt_one (ha : a < 1) (Œº ŒΩ : Measure Œ±) :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  rw [ne_eq, hellingerDiv_eq_top_iff_of_lt_one ha, not_not]

lemma hellingerDiv_ne_top_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§ := by
  rw [hellingerDiv_ne_top_iff_of_lt_one ha]
  exact integrable_hellingerFun_rnDeriv_of_lt_one ha_nonneg ha

lemma hellingerDiv_ne_bot : hellingerDiv a Œº ŒΩ ‚â† ‚ä• := by
  refine fDiv_ne_bot_of_derivAtTop_nonneg ?_
  by_cases ha : 1 ‚â§ a
  ¬∑ rw [derivAtTop_hellingerFun_of_one_le ha]
    exact OrderTop.le_top 0
  ¬∑ rw [derivAtTop_hellingerFun_of_lt_one (lt_of_not_ge ha)]

lemma hellingerDiv_eq_integral_of_ne_top [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := by
  rw [hellingerDiv, fDiv_of_ne_top (by rwa [hellingerDiv] at h)]
  cases lt_or_le a 1 with
  | inl ha_lt => rw [derivAtTop_hellingerFun_of_lt_one ha_lt, zero_mul, add_zero]
  | inr ha_ge =>
    rw [hellingerDiv_ne_top_iff_of_one_le ha_ge] at h
    rw [Measure.singularPart_eq_zero_of_ac h.2]
    simp

/- Integral form of the Hellinger divergence:
`H‚Çê(Œº, ŒΩ) = (a - 1)‚Åª¬π ‚à´ (dŒº/dŒΩ) ^ a dŒΩ - (a - 1)‚Åª¬π ŒΩ(Œ±)`.
This lemma is not true for `a = 0`, because `0 ^ 0 = 1`. -/
lemma hellingerDiv_eq_integral_of_ne_top' (ha_ne_zero : a ‚â† 0) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π * ŒΩ Set.univ := by
  rw [hellingerDiv_eq_integral_of_ne_top h]
  simp_rw [hellingerFun_of_ne_zero_of_ne_one ha_ne_zero ha_ne_one, integral_mul_left]
  rw [integral_sub _ (integrable_const _), integral_const, smul_eq_mul, mul_one, mul_sub,
    EReal.coe_sub, EReal.coe_mul, EReal.coe_mul, EReal.coe_ennreal_toReal (measure_ne_top _ _)]
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha_ne_one]
  by_contra h_not_int
  exact h (hellingerDiv_of_not_integrable h_not_int)

lemma hellingerDiv_eq_integral_of_ne_top'' (ha_ne_zero : a ‚â† 0) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsProbabilityMeasure ŒΩ] (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π := by
  rw [hellingerDiv_eq_integral_of_ne_top' ha_ne_zero ha_ne_one h]
  simp

lemma hellingerDiv_eq_integral_of_lt_one' (ha_pos : 0 < a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π * ŒΩ Set.univ :=
  hellingerDiv_eq_integral_of_ne_top' ha_pos.ne.symm ha.ne
    (hellingerDiv_ne_top_of_lt_one ha_pos.le ha Œº ŒΩ)

lemma hellingerDiv_toReal_of_lt_one (ha_pos : 0 < a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    (hellingerDiv a Œº ŒΩ).toReal
      = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π * (ŒΩ Set.univ).toReal := by
  rw [hellingerDiv_eq_integral_of_lt_one' ha_pos ha, EReal.toReal_sub]
  ¬∑ simp [EReal.toReal_mul]
  ¬∑ exact EReal.coe_mul _ _ ‚ñ∏ EReal.coe_ne_top _
  ¬∑ exact EReal.coe_mul _ _ ‚ñ∏  EReal.coe_ne_bot _
  ¬∑ simp [ne_eq, EReal.mul_eq_top, measure_ne_top]
  ¬∑ simp [ne_eq, EReal.mul_eq_bot, measure_ne_top]

lemma hellingerDiv_of_mutuallySingular_of_one_le (ha : 1 ‚â§ a) [NeZero Œº]
    [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] (hŒºŒΩ : Œº ‚üÇ‚Çò ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚ä§ := by
  have := fDiv_of_mutuallySingular hŒºŒΩ (f := hellingerFun a)
  rw [hellingerDiv, this, derivAtTop_hellingerFun_of_one_le ha,
    EReal.top_mul_ennreal_coe (NeZero.ne' (Œº Set.univ)).symm]
  apply EReal.add_top_of_ne_bot
  rw [ne_eq, EReal.mul_eq_bot, hellingerFun_apply_zero]
  simp [measure_ne_top]

lemma hellingerDiv_of_mutuallySingular_of_lt_one (ha : a < 1)
    [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] (hŒºŒΩ : Œº ‚üÇ‚Çò ŒΩ) :
    hellingerDiv a Œº ŒΩ = (1 - a)‚Åª¬π * ŒΩ Set.univ  := by
  rw [hellingerDiv, fDiv_of_mutuallySingular hŒºŒΩ, derivAtTop_hellingerFun_of_lt_one ha,
    hellingerFun_apply_zero, zero_mul, add_zero]

end HellingerEq

--Maybe we could write something like this for the conditional case? Would it be useful?
lemma hellingerDiv_le_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â§ (1 - a)‚Åª¬π * ŒΩ Set.univ := by
  by_cases h_zero : a = 0
  ¬∑ rw [h_zero, hellingerDiv_zero']
    simp only [inv_one, EReal.coe_one, one_mul, EReal.coe_ennreal_le_coe_ennreal_iff, sub_zero]
    exact measure_mono fun _ _ ‚Ü¶ trivial
  rw [hellingerDiv]
  refine (fDiv_le_zero_add_top (stronglyMeasurable_hellingerFun ha_nonneg)
    (convexOn_hellingerFun ha_nonneg)).trans_eq ?_
  rw [derivAtTop_hellingerFun_of_lt_one ha, zero_mul, add_zero,
    hellingerFun_of_ne_zero_of_ne_one h_zero ha.ne]
  simp only [zero_sub, mul_neg, mul_one, zero_mul, add_zero, zero_rpow h_zero]
  rw [neg_inv, neg_sub]

lemma hellingerDiv_symm' (ha_pos : 0 < a) (ha : a < 1) (h_eq : Œº Set.univ = ŒΩ Set.univ)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    (1 - a) * hellingerDiv a Œº ŒΩ = a * hellingerDiv (1 - a) ŒΩ Œº := by
  rw [hellingerDiv_eq_integral_of_lt_one' ha_pos ha, hellingerDiv_eq_integral_of_lt_one']
  rotate_left
  ¬∑ linarith
  ¬∑ linarith
  simp only [sub_sub_cancel_left]
  simp_rw [‚Üê EReal.coe_ennreal_toReal (measure_ne_top _ _), h_eq]
  norm_cast
  simp_rw [mul_sub, ‚Üê mul_assoc]
  have : (1 - a) * (a - 1)‚Åª¬π = a * (-a)‚Åª¬π := by
    rw [‚Üê neg_neg (1 - a), neg_sub, neg_mul, mul_inv_cancel, inv_neg, mul_comm, neg_mul,
      inv_mul_cancel ha_pos.ne']
    linarith
  rw [integral_rpow_rnDeriv ha_pos ha.ne]
  congr

lemma hellingerDiv_symm (ha_pos : 0 < a) (ha : a < 1)
    [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ] :
    (1 - a) * hellingerDiv a Œº ŒΩ = a * hellingerDiv (1 - a) ŒΩ Œº :=
  hellingerDiv_symm' ha_pos ha (by simp)

lemma hellingerDiv_zero_nonneg (Œº ŒΩ : Measure Œ±) :
    0 ‚â§ hellingerDiv 0 Œº ŒΩ := hellingerDiv_zero _ _ ‚ñ∏ EReal.coe_ennreal_nonneg _

lemma hellingerDiv_nonneg (ha_pos : 0 ‚â§ a) (Œº ŒΩ : Measure Œ±)
    [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ] :
    0 ‚â§ hellingerDiv a Œº ŒΩ := by
  by_cases h_zero : a = 0
  ¬∑ exact h_zero ‚ñ∏ hellingerDiv_zero_nonneg Œº ŒΩ
  replace ha_pos := ha_pos.lt_of_ne fun h ‚Ü¶ h_zero h.symm
  rw [hellingerDiv]
  exact fDiv_nonneg (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn
    hellingerFun_apply_one_eq_zero

section MeasUnivAddMulHellingerDiv
/-! In this section there are results about the expression `ŒΩ(Œ±) + (a - 1) * H‚Çê(Œº, ŒΩ)`,
which appears in the definition of the Renyi divergence. -/

lemma meas_univ_add_mul_hellingerDiv_eq (ha_ne_zero : a ‚â† 0) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ := by
  rw_mod_cast [hellingerDiv_eq_integral_of_ne_top' ha_ne_zero ha_ne_one h,
    ‚Üê ENNReal.ofReal_toReal (measure_ne_top ŒΩ Set.univ), EReal.coe_ennreal_ofReal,
    max_eq_left ENNReal.toReal_nonneg, ‚Üê mul_sub, ‚Üê mul_assoc, mul_inv_cancel _]
  ring_nf
  exact sub_ne_zero_of_ne ha_ne_one

lemma meas_univ_add_mul_hellingerDiv_zero_eq (ha : a = 0) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = ŒΩ {x | 0 < (‚àÇŒº/‚àÇŒΩ) x} := by
  simp only [ha, EReal.coe_zero, zero_sub, hellingerDiv_zero'', neg_mul, one_mul, rpow_zero,
    integral_const, smul_eq_mul, mul_one]
  rw [EReal.neg_sub, ‚Üê add_assoc, ‚Üê sub_eq_add_neg, EReal.sub_self, zero_add]
  all_goals simp [measure_ne_top]

lemma meas_univ_add_mul_hellingerDiv_nonneg_of_le_one (ha_nonneg : 0 ‚â§ a) (ha : a ‚â§ 1)
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    0 ‚â§ ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ := by
  by_cases h_one : a = 1
  ¬∑ have : (1 - 1 : EReal) = 0 := EReal.sub_self (ne_of_beq_false rfl) (ne_of_beq_false rfl)
    simp [h_one, add_zero, zero_mul, this, EReal.coe_ennreal_nonneg]
  replace ha : a < 1 := ha.lt_of_ne h_one
  calc
    _ = (ŒΩ Set.univ) - (1 - ‚Üëa) * hellingerDiv a Œº ŒΩ := by
      congr
      rw [‚Üê neg_mul, EReal.neg_sub _ _, add_comm, sub_eq_add_neg] <;> simp
    _ ‚â• (ŒΩ Set.univ) - (1 - ‚Üëa) * ((1 - a)‚Åª¬π * ŒΩ Set.univ) := by
      simp_rw [sub_eq_add_neg]
      gcongr
      rw [EReal.neg_le_neg_iff]
      gcongr
      ¬∑ norm_cast
        simp only [le_add_neg_iff_add_le, zero_add, ha.le]
      ¬∑ exact hellingerDiv_le_of_lt_one ha_nonneg ha Œº ŒΩ
    _ = (ŒΩ Set.univ) - (ŒΩ Set.univ) := by
      norm_cast
      rw [‚Üê mul_assoc, ‚Üê EReal.coe_mul, mul_inv_cancel (by linarith), EReal.coe_one, one_mul]
    _ ‚â• _ := by
      rw [‚Üê ENNReal.toEReal_sub (measure_ne_top _ _) (le_refl _)]
      simp

lemma meas_univ_add_mul_hellingerDiv_nonneg_of_one_lt (ha : 1 < a) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    0 ‚â§ ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ := by
  by_cases h_top : hellingerDiv a Œº ŒΩ = ‚ä§
  ¬∑ rw [h_top, EReal.mul_top_of_pos, EReal.add_top_of_ne_bot (EReal.coe_ennreal_ne_bot _)]
    ¬∑ exact OrderTop.le_top 0
    ¬∑ norm_cast
      linarith
  rw [meas_univ_add_mul_hellingerDiv_eq (by linarith) ha.ne' h_top]
  simp only [ge_iff_le, EReal.coe_nonneg]
  positivity

lemma meas_univ_add_mul_hellingerDiv_nonneg (ha_nonneg : 0 ‚â§ a) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    0 ‚â§ ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ := by
  by_cases h_le_one : a ‚â§ 1
  ¬∑ exact meas_univ_add_mul_hellingerDiv_nonneg_of_le_one ha_nonneg h_le_one Œº ŒΩ
  ¬∑ exact meas_univ_add_mul_hellingerDiv_nonneg_of_one_lt
      (lt_of_not_ge h_le_one) Œº ŒΩ

lemma meas_univ_add_mul_hellingerDiv_eq_zero_iff (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
  ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = 0 ‚Üî Œº ‚üÇ‚Çò ŒΩ ‚àß hellingerDiv a Œº ŒΩ ‚â† ‚ä§ := by
  by_cases h_top : hellingerDiv a Œº ŒΩ = ‚ä§
  ¬∑ simp only [h_top, ne_eq, not_true_eq_false, and_false, iff_false]
    rcases (lt_or_gt_of_ne ha_ne_one) with ha | ha
    ¬∑ rw [EReal.mul_top_of_neg (by exact_mod_cast sub_neg.mpr ha), EReal.add_bot]
      exact EReal.bot_ne_zero
    ¬∑ rw [EReal.mul_top_of_pos (by exact_mod_cast sub_pos.mpr ha),
        EReal.add_top_of_ne_bot (EReal.coe_ennreal_ne_bot _)]
      exact EReal.top_ne_zero
  simp_rw [ne_eq, h_top, not_false_eq_true, and_true]
  by_cases ha_zero : a = 0
  ¬∑ rw [meas_univ_add_mul_hellingerDiv_zero_eq ha_zero, ‚Üê Measure.rnDeriv_eq_zero,
      EReal.coe_ennreal_eq_zero]
    simp_rw [‚Üê not_le, ‚Üê ae_iff]
    exact eventually_congr <| eventually_of_forall <| fun _ ‚Ü¶ nonpos_iff_eq_zero
  rw [meas_univ_add_mul_hellingerDiv_eq ha_zero ha_ne_one h_top]
  norm_cast
  refine integral_rpow_rnDeriv_eq_zero_iff_mutuallySingular ha_zero ?_
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha_ne_one]
  exact integrable_of_fDiv_ne_top h_top

lemma meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_lt_one (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = 0 ‚Üî Œº ‚üÇ‚Çò ŒΩ  := by
  rw [meas_univ_add_mul_hellingerDiv_eq_zero_iff ha.ne, and_iff_left_iff_imp]
  intro hŒºŒΩ
  rw [hellingerDiv_of_mutuallySingular_of_lt_one ha hŒºŒΩ, ne_eq, EReal.mul_eq_top]
  simp [measure_ne_top]

lemma meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = 0 ‚Üî Œº = 0 := by
  rw [meas_univ_add_mul_hellingerDiv_eq_zero_iff ha.ne', hellingerDiv_ne_top_iff_of_one_le ha.le]
  refine ‚ü®fun ‚ü®h, _, h'‚ü© ‚Ü¶ Measure.eq_zero_of_absolutelyContinuous_of_mutuallySingular h' h,
    fun h ‚Ü¶ ?_‚ü©
  simp only [h, Measure.MutuallySingular.zero_left, Measure.AbsolutelyContinuous.zero, and_true,
    true_and]
  apply Integrable.congr (show Integrable (fun _ ‚Ü¶ hellingerFun a 0) ŒΩ from integrable_const _)
  filter_upwards [Measure.rnDeriv_zero ŒΩ] with x hx
  simp [hx]

lemma toENNReal_meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_lt_one
    (ha_nonneg : 0 ‚â§ a) (ha : a < 1) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    (‚Üë(ŒΩ Set.univ) + (a - 1) * (hellingerDiv a Œº ŒΩ)).toENNReal = 0 ‚Üî Œº ‚üÇ‚Çò ŒΩ  := by
  rw [‚Üê meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_lt_one ha, EReal.toENNReal_eq_zero_iff]
  exact LE.le.le_iff_eq (meas_univ_add_mul_hellingerDiv_nonneg ha_nonneg Œº ŒΩ)

lemma toENNReal_meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    (‚Üë(ŒΩ Set.univ) + (a - 1) * (hellingerDiv a Œº ŒΩ)).toENNReal = 0 ‚Üî Œº = 0  := by
  rw [‚Üê meas_univ_add_mul_hellingerDiv_eq_zero_iff_of_one_lt ha (ŒΩ := ŒΩ),
    EReal.toENNReal_eq_zero_iff]
  exact LE.le.le_iff_eq (meas_univ_add_mul_hellingerDiv_nonneg (by positivity) Œº ŒΩ)

lemma meas_univ_add_mul_hellingerDiv_ne_top_of_lt_one (ha : a < 1) [IsFiniteMeasure ŒΩ] :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ ‚â† ‚ä§ := by
  apply EReal.add_ne_top
  ¬∑ simp [measure_ne_top]
  ¬∑ rw [ne_eq, EReal.mul_eq_top]
    norm_cast
    simp_rw [EReal.coe_ne_bot, EReal.coe_ne_top, sub_neg, sub_pos, ha, not_lt_of_gt ha,
      hellingerDiv_ne_bot]
    tauto

lemma meas_univ_add_mul_hellingerDiv_eq_top_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    ‚Üë(ŒΩ Set.univ) + (a - 1) * hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ ‚à® ¬¨ Œº ‚â™ ŒΩ := by
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha.ne',
    ‚Üê hellingerDiv_eq_top_iff_of_one_le ha.le]
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ contrapose! h
    refine EReal.add_ne_top ?_ ?_
    ¬∑ rw [ne_eq, EReal.coe_ennreal_eq_top_iff]
      exact measure_ne_top ŒΩ Set.univ
    ¬∑ rw [ne_eq, EReal.mul_eq_top]
      norm_cast
      simp_rw [EReal.coe_ne_bot, EReal.coe_ne_top, sub_neg, sub_pos, ha, not_lt_of_gt ha,
      hellingerDiv_ne_bot]
      tauto
  ¬∑ rw [h, EReal.mul_top_of_pos (by exact_mod_cast sub_pos.mpr ha), EReal.add_top_of_ne_bot]
    exact EReal.coe_ennreal_ne_bot _

end MeasUnivAddMulHellingerDiv
section Conditional

variable {Œ≤ : Type*} {mŒ≤ : MeasurableSpace Œ≤} {Œ∫ Œ∑ : kernel Œ± Œ≤}

lemma hellingerDiv_ae_ne_top_iff' (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)) := by
  simp_rw [hellingerDiv_ne_top_iff, eventually_and, eventually_all]

lemma hellingerDiv_ae_ne_top_iff (ha_ne_one : a ‚â† 1)
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚àß (1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)) := by
  convert hellingerDiv_ae_ne_top_iff' Œ∫ Œ∑ using 4 with x
  exact (integrable_hellingerFun_iff_integrable_rpow ha_ne_one).symm

lemma hellingerDiv_ae_ne_top_iff_of_lt_one' (ha : a < 1) (Œ∫ Œ∑ : kernel Œ± Œ≤) :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) := by
  simp_rw [hellingerDiv_ne_top_iff_of_lt_one ha]

lemma hellingerDiv_ae_ne_top_iff_of_lt_one (ha : a < 1) (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∑] :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x)) := by
  convert hellingerDiv_ae_ne_top_iff_of_lt_one' ha Œ∫ Œ∑ using 3 with x
  exact (integrable_hellingerFun_iff_integrable_rpow ha.ne).symm

/--Use this version only for the case `1 < a` or when one of the kernels is not finite, otherwise
use `integrable_hellingerDiv_iff_of_lt_one`, as it is strictly more general.-/
lemma integrable_hellingerDiv_iff
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x) :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ‚àÇŒ∑ x) Œº := by
  apply integrable_congr
  filter_upwards [h_int, eventually_all.mpr h_ac] with x hx_int hx_ac
  rw [hellingerDiv_eq_integral_of_integrable_of_ac hx_int hx_ac, EReal.toReal_coe]

lemma integrable_hellingerDiv_iff_of_lt_one (ha_nonneg : 0 ‚â§ a) (ha : a < 1)
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ‚àÇŒ∑ x) Œº := by
  refine integrable_congr (eventually_of_forall fun x ‚Ü¶ ?_)
  simp_rw [hellingerDiv_eq_integral_of_lt_one ha_nonneg ha, EReal.toReal_coe]

lemma integrable_hellingerDiv_iff' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_ac : 1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x) :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  have h_fin : ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§ := by
    filter_upwards [h_int, eventually_all.mpr h_ac] with x hx_int hx_ac
    rcases lt_or_gt_of_ne ha_ne_one with ha_lt | ha_gt
    ¬∑ exact hellingerDiv_ne_top_of_lt_one ha_pos.le ha_lt _ _
    ¬∑ exact hellingerDiv_ne_top_iff_of_one_lt ha_gt _ _ |>.mpr ‚ü®hx_int, hx_ac ha_gt.le‚ü©
  have h_eq_eq : ‚àÄ·µê x ‚àÇŒº, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal =
      (a - 1)‚Åª¬π * ((‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) - ((Œ∑ x) Set.univ).toReal) := by
    filter_upwards [h_fin] with x hx
    rw [hellingerDiv_eq_integral_of_ne_top' ha_pos.ne.symm ha_ne_one hx, ‚Üê EReal.coe_mul,
      EReal.toReal_sub (EReal.coe_ne_top _) (EReal.coe_ne_bot _), EReal.toReal_coe,
      EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal, mul_sub]
    ¬∑ refine (EReal.mul_eq_top _ _).mp.mt ?_
      push_neg
      exact ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_nonneg _, ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_ne_bot _,
        ‚ü®by simp only [EReal.coe_ne_top, IsEmpty.forall_iff],
        fun _ ‚Ü¶ EReal.coe_ennreal_eq_top_iff.mp.mt (measure_ne_top _ _)‚ü©‚ü©‚ü©
    ¬∑ refine (EReal.mul_eq_bot _ _).mp.mt ?_
      push_neg
      exact ‚ü®by simp only [EReal.coe_ne_bot, IsEmpty.forall_iff],
        ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_ne_bot _, ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_nonneg _,
        fun _ ‚Ü¶ EReal.coe_ennreal_eq_top_iff.mp.mt (measure_ne_top _ _)‚ü©‚ü©‚ü©
  rw [integrable_congr h_eq_eq, integrable_const_mul_iff (isUnit_iff_ne_zero.mpr <| (ne_eq _ _).mpr
    <| inv_eq_zero.mp.mt <| sub_ne_zero_of_ne ha_ne_one)]
  obtain ‚ü®C, ‚ü®hC_finite, hC‚ü©‚ü© := IsFiniteKernel.exists_univ_le (Œ∫ := Œ∑)
  refine integrable_add_iff_integrable_left <| (integrable_const C.toReal).mono' ?_ ?_
  ¬∑ exact kernel.measurable_coe Œ∑ MeasurableSet.univ |>.ennreal_toReal.neg.aestronglyMeasurable
  refine eventually_of_forall (fun x ‚Ü¶ ?_)
  rw [norm_eq_abs, abs_neg, abs_eq_self.mpr ENNReal.toReal_nonneg, ENNReal.toReal_le_toReal
    (measure_ne_top _ _) (lt_top_iff_ne_top.mp hC_finite)]
  exact hC x

--TODO: shouldn't Set.setOf_app_iff be a simp lemma?

lemma integrable_hellingerDiv_zero [CountableOrCountablyGenerated Œ± Œ≤]
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ (hellingerDiv 0 (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  simp_rw [hellingerDiv_zero]
  obtain ‚ü®C, ‚ü®hC_finite, hC‚ü©‚ü© := IsFiniteKernel.exists_univ_le (Œ∫ := Œ∑)
  simp only [EReal.toReal_coe_ennreal]
  have h_eq : (fun x ‚Ü¶ ((Œ∑ x) {y | ((Œ∫ x).rnDeriv (Œ∑ x) y).toReal = 0}).toReal) =
      fun x ‚Ü¶ ((Œ∑ x) {y | (kernel.rnDeriv Œ∫ Œ∑ x y).toReal = 0}).toReal := by
    ext x
    congr 1
    apply measure_congr
    filter_upwards [kernel.rnDeriv_eq_rnDeriv_measure Œ∫ Œ∑ x] with y hy
    simp only [Set.setOf_app_iff, eq_iff_iff, hy]
  simp_rw [h_eq]
  apply (integrable_const C.toReal).mono'
  ¬∑ apply Measurable.aestronglyMeasurable
    apply Measurable.ennreal_toReal
    exact kernel.measurable_kernel_prod_mk_left
      (measurableSet_eq_fun (kernel.measurable_rnDeriv _ _).ennreal_toReal measurable_const)
  ¬∑ refine eventually_of_forall (fun x ‚Ü¶ ?_)
    simp only [norm_eq_abs, ENNReal.abs_toReal, ENNReal.toReal_le_toReal
    (measure_ne_top _ _) (lt_top_iff_ne_top.mp hC_finite)]
    exact measure_mono (Set.subset_univ _) |>.trans (hC x)

lemma integrable_hellingerDiv_iff'_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  integrable_hellingerDiv_iff' ha_pos ha.ne (eventually_of_forall
    (fun _ ‚Ü¶ integrable_rpow_rnDeriv_of_lt_one ha_pos.le ha)) (not_le_of_gt ha).elim

/-- Conditional Hellinger divergence of order `a`. -/
noncomputable def condHellingerDiv (a : ‚Ñù) (Œ∫ Œ∑ : kernel Œ± Œ≤) (Œº : Measure Œ±) : EReal :=
  condFDiv (hellingerFun a) Œ∫ Œ∑ Œº

/-! There are multiple combinations of hypotheses that give rise to slightly different versions of
the following lemmas. The ones we will consider as a normal form are when we assume that `Œº`, `Œ∫`
and `Œ∑` are all finite and `a ‚àà (0, 1) ‚à™ (1, +‚àû)`.

Consider the following conditions:
1. `condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§`
2. `condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº`
3.a `‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x)` (`h_int`)
3.b `‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)` (`h_ac`)
3.c `Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº` (`h_int'`)
4. `condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº - (a - 1)‚Åª¬π * ((Œº ‚äó‚Çò Œ∑) Set.univ).toReal`

Then the following hold:
- 1. ‚Üî 2. (`condHellingerDiv_eq_integral_iff_ne_top`)
- if `1 < a`:
  - 1. ‚Üî 3.a ‚àß 3.b ‚àß 3.c (`condHellingerDiv_ne_top_iff_of_one_lt`)
  - 2. ‚Üî 3.a ‚àß 3.b ‚àß 3.c (`condHellingerDiv_eq_integral_iff_of_one_lt`)
  - 3.a ‚àß 3.b ‚àß 3.c ‚Üí 4. (`condHellingerDiv_eq_integral'_of_one_lt`)
- if `a < 1`:
  - 1. ‚Üî 3.c (`condHellingerDiv_ne_top_iff_of_lt_one'`)
  - 2. ‚Üî 3.c (`condHellingerDiv_eq_integral_iff_of_lt_one`)
  - 3.c ‚Üí 4. (`condHellingerDiv_eq_integral'_of_lt_one`)

The implications 4. ‚Üí 1./2./3. are not explicitely stated but, if needed, it should be immediate to
prove 4. ‚Üí 1. and then have all the other implications for free.
-/
section CondHellingerEq

lemma condHellingerDiv_one [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv 1 Œ∫ Œ∑ Œº = condKL Œ∫ Œ∑ Œº := by
  rw [condHellingerDiv, hellingerFun_one, condKL_eq_condFDiv]

lemma condHellingerDiv_of_not_ae_finite (h_ae : ¬¨ ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  rw [condHellingerDiv]
  exact condFDiv_of_not_ae_finite h_ae

lemma condHellingerDiv_of_not_ae_integrable' [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ¬¨ ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := condFDiv_of_not_ae_integrable h_int

lemma condHellingerDiv_of_not_ae_integrable (ha_ne_one : a ‚â† 1)
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ¬¨ ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  simp_rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha_ne_one] at h_int
  exact condFDiv_of_not_ae_integrable h_int

lemma condHellingerDiv_of_not_ae_integrable_of_lt_one (ha : a < 1)
    (h_int : ¬¨ ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  apply condHellingerDiv_of_not_ae_finite
  rw [hellingerDiv_ae_ne_top_iff_of_lt_one' ha]
  exact h_int

lemma condHellingerDiv_of_not_ae_ac_of_one_le (ha : 1 ‚â§ a) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_ac : ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  apply condHellingerDiv_of_not_ae_finite
  rw [hellingerDiv_ae_ne_top_iff']
  tauto

lemma condHellingerDiv_of_not_integrable
    (h_int : ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := condFDiv_of_not_integrable h_int

lemma condHellingerDiv_of_not_integrable' (ha_nonneg : 0 ‚â§ a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  by_cases ha_zero : a = 0
  ¬∑ simp [ha_zero, Integrable.kernel] at h_int'
  have ha_pos := ha_nonneg.lt_of_ne fun h ‚Ü¶ ha_zero h.symm
  by_cases h_int2 : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x)
  swap; exact condHellingerDiv_of_not_ae_integrable ha_ne_one h_int2
  by_cases h_ac : 1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x
  swap
  ¬∑ push_neg at h_ac
    exact condHellingerDiv_of_not_ae_ac_of_one_le h_ac.1 h_ac.2
  apply condHellingerDiv_of_not_integrable
  rwa [integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int2 h_ac]

lemma condHellingerDiv_of_ae_finite_of_integrable (h_ae : ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condFDiv_eq' h_ae h_int2

lemma condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff' _ _).mpr ‚ü®h_int, h_ac‚ü©) h_int2

lemma condHellingerDiv_zero_eq [CountableOrCountablyGenerated Œ± Œ≤]
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv 0 Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv 0 (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff' _ _).mpr
      ‚ü®eventually_of_forall (fun _ ‚Ü¶ integrable_hellingerFun_zero), by simp‚ü©)
    integrable_hellingerDiv_zero

lemma condHellingerDiv_zero_of_ae_integrable_of_integrable [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv 0 (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv 0 Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv 0 (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff' _ _).mpr
      ‚ü®eventually_of_forall (fun _ ‚Ü¶ integrable_hellingerFun_zero), by simp‚ü©) h_int2

--TODO: try to generalize this to the case `a = 0`
lemma condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_ac : 1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff ha_ne_one _ _).mpr ‚ü®h_int, h_ac‚ü©)
    (integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int h_ac |>.mpr h_int')

lemma condHellingerDiv_of_ae_integrable_of_integrable_of_lt_one (ha : a < 1) [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff_of_lt_one ha _ _).mpr h_int) h_int2

lemma condHellingerDiv_of_integrable'_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff_of_lt_one ha _ _).mpr
      (eventually_of_forall <| fun _ ‚Ü¶ integrable_rpow_rnDeriv_of_lt_one ha_pos.le ha))
    (integrable_hellingerDiv_iff'_of_lt_one ha_pos ha |>.mpr h_int')

lemma condHellingerDiv_eq_top_iff [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚à® (1 ‚â§ a ‚àß ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  constructor
  ¬∑ contrapose!
    rintro ‚ü®h_int, h_ac, h_int2‚ü©
    rw [condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable h_int h_ac h_int2]
    exact EReal.coe_ne_top _
  ¬∑ rintro (h_int | ‚ü®ha, h_ac‚ü© | h_int2)
    ¬∑ exact condHellingerDiv_of_not_ae_integrable' h_int
    ¬∑ exact condHellingerDiv_of_not_ae_ac_of_one_le ha h_ac
    ¬∑ exact condHellingerDiv_of_not_integrable h_int2

lemma condHellingerDiv_ne_top_iff [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  rw [ne_eq, condHellingerDiv_eq_top_iff]
  push_neg
  rfl

lemma condHellingerDiv_ne_top_iff' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚àß (1 ‚â§ a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_ne_top_iff, integrable_hellingerFun_iff_integrable_rpow ha_ne_one]
  refine and_congr_right (fun h_int ‚Ü¶ and_congr_right (fun h_ac ‚Ü¶ ?_))
  rw [integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int h_ac]

lemma condHellingerDiv_eq_top_iff' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚à® (1 ‚â§ a ‚àß ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  rw [‚Üê not_not (a := _ = ‚ä§), ‚Üê ne_eq, condHellingerDiv_ne_top_iff' ha_pos ha_ne_one]
  tauto

lemma condHellingerDiv_ne_top_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚àß (‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_ne_top_iff' (zero_lt_one.trans ha) ha.ne.symm, ha.le, true_implies]

lemma condHellingerDiv_eq_top_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚à® (1 ‚â§ a ‚àß ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  rw [‚Üê not_not (a := _ = ‚ä§), ‚Üê ne_eq, condHellingerDiv_ne_top_iff_of_one_lt ha]
  have ha' : 1 ‚â§ a := ha.le
  tauto

lemma condHellingerDiv_eq_top_iff_of_lt_one (ha : a < 1) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  simp only [condHellingerDiv_eq_top_iff, not_eventually, ha.not_le, false_and, false_or]

lemma condHellingerDiv_ne_top_iff_of_lt_one (ha : a < 1) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  simp only [condHellingerDiv_ne_top_iff, ha.not_le, false_implies, true_and]

lemma condHellingerDiv_eq_top_iff_of_lt_one' (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_eq_top_iff_of_lt_one ha,
    (eventually_of_forall <| fun _ ‚Ü¶ integrable_hellingerFun_rnDeriv_of_lt_one ha_pos.le ha),
    integrable_hellingerDiv_iff'_of_lt_one ha_pos ha, not_true, false_or]

lemma condHellingerDiv_ne_top_iff_of_lt_one' (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  rw [ne_eq, condHellingerDiv_eq_top_iff_of_lt_one' ha_pos ha, not_not]

lemma condHellingerDiv_eq_integral_iff_ne_top (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ h ‚ñ∏ EReal.coe_ne_top _‚ü©
  rw [condHellingerDiv_ne_top_iff' ha_pos ha_ne_one] at h
  exact condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable' ha_pos ha_ne_one h.1 h.2.1 h.2.2

lemma condHellingerDiv_eq_integral_iff_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
        ‚àß (‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  (condHellingerDiv_eq_integral_iff_ne_top (zero_lt_one.trans ha) ha.ne.symm).symm.trans
    (condHellingerDiv_ne_top_iff_of_one_lt ha)

lemma condHellingerDiv_eq_integral_iff_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  (condHellingerDiv_eq_integral_iff_ne_top ha_pos ha.ne).symm.trans
    (condHellingerDiv_ne_top_iff_of_lt_one' ha_pos ha)

lemma condHellingerDiv_eq_integral'_of_one_lt (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * ((Œº ‚äó‚Çò Œ∑) Set.univ).toReal := by
  rw [condHellingerDiv_eq_integral_iff_of_one_lt ha |>.mpr ‚ü®h_int, h_ac, h_int'‚ü©]
  norm_cast
  calc
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toEReal).toReal ‚àÇŒº := by
      apply integral_congr_ae
      filter_upwards [h_int, h_ac] with x hx_int hx_ac
      congr
      exact hellingerDiv_eq_integral_of_ne_top' (by positivity) ha.ne.symm <|
        hellingerDiv_ne_top_iff_of_one_lt ha _ _ |>.mpr ‚ü®hx_int, hx_ac‚ü©
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº := by
      refine integral_congr_ae (eventually_of_forall fun x ‚Ü¶ ?_)
      dsimp
      rw [EReal.toReal_sub (ne_of_beq_false (by rfl)) (ne_of_beq_false (by rfl))]
      congr
      rw [EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal]
      all_goals
        simp only [ne_eq, EReal.mul_eq_top, EReal.mul_eq_bot, EReal.coe_ne_bot, false_and,
          EReal.coe_neg', EReal.coe_ennreal_ne_bot, and_false, EReal.coe_ne_top,
          EReal.coe_ennreal_pos, Measure.measure_univ_pos, EReal.coe_pos,
          EReal.coe_ennreal_eq_top_iff, measure_ne_top, or_self, not_false_eq_true]
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) ‚àÇŒº
        - ‚à´ x, ((a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº :=
      integral_sub (Integrable.const_mul h_int' _)
        (Integrable.const_mul (Integrable.kernel _ MeasurableSet.univ) _)
    _ = _ := by
      rw [integral_mul_left, integral_mul_left, compProd_univ_toReal]

lemma condHellingerDiv_eq_integral'_of_one_lt' (ha : 1 < a)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * (Œº Set.univ).toReal := by
  simp_rw [condHellingerDiv_eq_integral'_of_one_lt ha h_int h_ac h_int',
    compProd_univ_toReal, measure_univ, ENNReal.one_toReal, integral_const, smul_eq_mul, mul_one]

lemma condHellingerDiv_eq_integral'_of_one_lt'' (ha : 1 < a)
    [IsProbabilityMeasure Œº] [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π := by
  rw [condHellingerDiv_eq_integral'_of_one_lt' ha h_int h_ac h_int', measure_univ,
    ENNReal.one_toReal, EReal.coe_one, mul_one]

lemma condHellingerDiv_eq_integral'_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * ((Œº ‚äó‚Çò Œ∑) Set.univ).toReal := by
  rw [condHellingerDiv_eq_integral_iff_of_lt_one ha_pos ha |>.mpr h_int']
  norm_cast
  calc
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toEReal).toReal ‚àÇŒº := by
      apply integral_congr_ae
      filter_upwards with x
      congr
      exact hellingerDiv_eq_integral_of_lt_one' ha_pos ha _ _
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x --from here to the end the proof is the same as the one of `condHellingerDiv_eq_integral'_of_one_lt`, consider separating this part as a lemma
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº := by
      refine integral_congr_ae (eventually_of_forall fun x ‚Ü¶ ?_)
      dsimp
      rw [EReal.toReal_sub (ne_of_beq_false (by rfl)) (ne_of_beq_false (by rfl))]
      congr
      rw [EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal]
      all_goals
        simp only [ne_eq, EReal.mul_eq_top, EReal.mul_eq_bot, EReal.coe_ne_bot, false_and,
          EReal.coe_neg', EReal.coe_ennreal_ne_bot, and_false, EReal.coe_ne_top,
          EReal.coe_ennreal_pos, Measure.measure_univ_pos, EReal.coe_pos,
          EReal.coe_ennreal_eq_top_iff, measure_ne_top, or_self, not_false_eq_true]
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) ‚àÇŒº
        - ‚à´ x, ((a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº :=
      integral_sub (Integrable.const_mul h_int' _)
        (Integrable.const_mul (Integrable.kernel _ MeasurableSet.univ) _)
    _ = _ := by
      rw [integral_mul_left, integral_mul_left, compProd_univ_toReal]

lemma condHellingerDiv_eq_integral'_of_lt_one' (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * (Œº Set.univ).toReal := by
  simp_rw [condHellingerDiv_eq_integral'_of_lt_one ha_pos ha h_int', compProd_univ_toReal,
    measure_univ, ENNReal.one_toReal, integral_const, smul_eq_mul, mul_one]

lemma condHellingerDiv_eq_integral'_of_lt_one'' (ha_pos : 0 < a) (ha : a < 1)
    [IsProbabilityMeasure Œº] [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π := by
  rw [condHellingerDiv_eq_integral'_of_lt_one' ha_pos ha h_int', measure_univ,
    ENNReal.one_toReal, EReal.coe_one, mul_one]

end CondHellingerEq

lemma hellingerDiv_compProd_left [CountableOrCountablyGenerated Œ± Œ≤] (ha_nonneg : 0 ‚â§ a)
    (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [‚àÄ x, NeZero (Œ∫ x)] [IsFiniteKernel Œ∑] :
    hellingerDiv a (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) = condHellingerDiv a Œ∫ Œ∑ Œº := by
  rw [hellingerDiv, condHellingerDiv, fDiv_compProd_left _ _ _
    (stronglyMeasurable_hellingerFun ha_nonneg) (convexOn_hellingerFun ha_nonneg)]

end Conditional

section DataProcessingInequality

variable {Œ≤ : Type*} {mŒ≤ : MeasurableSpace Œ≤} {Œ∫ Œ∑ : kernel Œ± Œ≤}

lemma le_hellingerDiv_compProd [CountableOrCountablyGenerated Œ± Œ≤] (ha_pos : 0 < a)
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsMarkovKernel Œ∫] [IsMarkovKernel Œ∑] :
    hellingerDiv a Œº ŒΩ ‚â§ hellingerDiv a (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑) :=
  le_fDiv_compProd Œº ŒΩ Œ∫ Œ∑ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

lemma hellingerDiv_fst_le [Nonempty Œ≤] [StandardBorelSpace Œ≤] (ha_pos : 0 < a)
    (Œº ŒΩ : Measure (Œ± √ó Œ≤)) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº.fst ŒΩ.fst ‚â§ hellingerDiv a Œº ŒΩ :=
  fDiv_fst_le _ _ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

lemma hellingerDiv_snd_le [Nonempty Œ±] [StandardBorelSpace Œ±] (ha_pos : 0 < a)
    (Œº ŒΩ : Measure (Œ± √ó Œ≤)) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº.snd ŒΩ.snd ‚â§ hellingerDiv a Œº ŒΩ :=
  fDiv_snd_le _ _ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

lemma hellingerDiv_comp_le_compProd [Nonempty Œ±] [StandardBorelSpace Œ±] (ha_pos : 0 < a)
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    hellingerDiv a (Œº ‚àò‚Çò Œ∫) (ŒΩ ‚àò‚Çò Œ∑) ‚â§ hellingerDiv a (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑) :=
  fDiv_comp_le_compProd Œº ŒΩ Œ∫ Œ∑ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

lemma hellingerDiv_comp_left_le [Nonempty Œ±] [StandardBorelSpace Œ±]
    [CountableOrCountablyGenerated Œ± Œ≤] (ha_pos : 0 < a) (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [‚àÄ a, NeZero (Œ∫ a)] [IsFiniteKernel Œ∑] :
    hellingerDiv a (Œº ‚àò‚Çò Œ∫) (Œº ‚àò‚Çò Œ∑) ‚â§ condHellingerDiv a Œ∫ Œ∑ Œº :=
  fDiv_comp_left_le Œº Œ∫ Œ∑ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

/--The Data Processing Inequality for the Hellinger divergence. -/
lemma hellingerDiv_comp_right_le [Nonempty Œ±] [StandardBorelSpace Œ±] (ha_pos : 0 < a)
    [CountableOrCountablyGenerated Œ± Œ≤]
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ : kernel Œ± Œ≤) [IsMarkovKernel Œ∫] :
    hellingerDiv a (Œº ‚àò‚Çò Œ∫) (ŒΩ ‚àò‚Çò Œ∫) ‚â§ hellingerDiv a Œº ŒΩ :=
  fDiv_comp_right_le Œº ŒΩ Œ∫ (stronglyMeasurable_hellingerFun ha_pos.le)
    (convexOn_hellingerFun ha_pos.le) (continuous_hellingerFun ha_pos).continuousOn

end DataProcessingInequality

end ProbabilityTheory
