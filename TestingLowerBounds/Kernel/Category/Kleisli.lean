/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.CategoryTheory.Monad.Kleisli
import TestingLowerBounds.Kernel.Category.CommutativeMonad

/-!

# Categories of measurable spaces and Kernels

-/

open CategoryTheory MonoidalCategory

universe u v

namespace CategoryTheory

namespace Kleisli

variable {C : Type u} [Category.{v} C] {T : Monad C}

lemma id_def {X : Kleisli T} : ùüô X = T.Œ∑.app X := rfl

lemma comp_def {X Y Z : Kleisli T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    f ‚â´ g = @CategoryStruct.comp C Category.toCategoryStruct _ _ _ f (T.map g) ‚â´ T.Œº.app Z := by
  simp only [Category.assoc]
  rfl

variable [MonoidalCategory C]

section Strong

variable [Strong T]

instance : MonoidalCategoryStruct (Kleisli T) where
  tensorObj X Y := (Adjunction.toKleisli T).obj (X ‚äó Y)
  whiskerLeft X Y‚ÇÅ Y‚ÇÇ f :=
    ((T.Œ∑.app X ‚äó f) ‚â´ T.dStr X Y‚ÇÇ : @tensorObj C _ _ X Y‚ÇÅ ‚ü∂ T.obj (X ‚äó Y‚ÇÇ))
  whiskerRight {X‚ÇÅ X‚ÇÇ} f Y :=
    ((f ‚äó T.Œ∑.app Y) ‚â´ T.dStr X‚ÇÇ Y : @tensorObj C _ _ X‚ÇÅ Y ‚ü∂ T.obj (X‚ÇÇ ‚äó Y))
  tensorUnit := (Adjunction.toKleisli T).obj (ùüô_ C)
  associator X Y Z := (Adjunction.toKleisli T).mapIso
    (@MonoidalCategoryStruct.associator C _ _ X Y Z)
  leftUnitor X := (Adjunction.toKleisli T).mapIso (@MonoidalCategoryStruct.leftUnitor C _ _ X)
  rightUnitor X := (Adjunction.toKleisli T).mapIso (@MonoidalCategoryStruct.rightUnitor C _ _ X)

lemma tensorObj_def (X Y : Kleisli T) : X ‚äó Y = @tensorObj C _ _ X Y := rfl

lemma tensorHom_def {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : Kleisli T} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g: X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    f ‚äó g = (f ‚ñ∑ X‚ÇÇ) ‚â´ (Y‚ÇÅ ‚óÅ g) := rfl

lemma whiskerLeft_def (X : Kleisli T) {Y‚ÇÅ Y‚ÇÇ : Kleisli T} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
    X ‚óÅ f = (T.Œ∑.app X ‚äó f) ‚â´ T.dStr X Y‚ÇÇ := rfl

lemma whiskerRight_def {X‚ÇÅ X‚ÇÇ : Kleisli T} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : Kleisli T) :
    f ‚ñ∑ Y = ((f ‚äó T.Œ∑.app Y) ‚â´ T.dStr X‚ÇÇ Y : @tensorObj C _ _ X‚ÇÅ Y ‚ü∂ T.obj (X‚ÇÇ ‚äó Y)) := rfl

lemma tensorUnit_def : ùüô_ (Kleisli T) = (Kleisli.Adjunction.toKleisli T).obj (ùüô_ C) := rfl

lemma associator_def (X Y Z : Kleisli T) :
    Œ±_ X Y Z = (Adjunction.toKleisli T).mapIso (@MonoidalCategoryStruct.associator C _ _ X Y Z) :=
  rfl

lemma leftUnitor_def (X : Kleisli T) :
    Œª_ X = (Adjunction.toKleisli T).mapIso (@MonoidalCategoryStruct.leftUnitor C _ _ X) := rfl

lemma rightUnitor_def (X : Kleisli T) :
    œÅ_ X = (Adjunction.toKleisli T).mapIso (@MonoidalCategoryStruct.rightUnitor C _ _ X) := rfl

lemma wiskerLeft_id {X Y : Kleisli T} : X ‚óÅ ùüô Y = ùüô (X ‚äó Y) := by
  simp [id_def, whiskerLeft_def, tensorObj_def]

lemma id_whiskerRight {X Y : Kleisli T} : ùüô X ‚ñ∑ Y = ùüô (X ‚äó Y) := by
  simp [id_def, whiskerRight_def, tensorObj_def]

lemma whiskerLeft_comp (X : Kleisli T) {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Kleisli T}
    (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) :
    X ‚óÅ (f ‚â´ g) = X ‚óÅ f ‚â´ X ‚óÅ g := by
  simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
    leftUnitor_def, rightUnitor_def, comp_def]

end Strong

lemma comp_whiskerRight [CommutativeMonad T] {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Kleisli T}
    (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) (X : Kleisli T) :
    (f ‚â´ g) ‚ñ∑ X = f ‚ñ∑ X ‚â´ g ‚ñ∑ X := by
  simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
    leftUnitor_def, rightUnitor_def, comp_def]

lemma whisker_exchange [CommutativeMonad T] {W X Y Z : Kleisli T}
    (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
    W ‚óÅ g ‚â´ f ‚ñ∑ Z = f ‚ñ∑ Y ‚â´ X ‚óÅ g := by
  simp only [tensorObj_def, whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left, whiskerRight_def,
    Monad.unit_dStr_right, comp_def, Functor.map_comp, Category.assoc]
  slice_rhs 2 3 => rw [‚Üê T.rStr_naturality_id_left]
  slice_rhs 1 2 => rw [‚Üê MonoidalCategory.whisker_exchange]
  slice_lhs 2 3 => rw [‚Üê T.lStr_naturality_id_right]
  simp only [Category.assoc]
  congr 2
  exact T.lStr_rStr_comm X Z

variable {W X Y Z X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ X‚ÇÉ Y‚ÇÉ Z‚ÇÉ : Kleisli T}

private lemma tensor_comp [CommutativeMonad T]
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
    f‚ÇÅ ‚â´ g‚ÇÅ ‚äó f‚ÇÇ ‚â´ g‚ÇÇ = (f‚ÇÅ ‚äó f‚ÇÇ) ‚â´ (g‚ÇÅ ‚äó g‚ÇÇ) := by
  simp only [tensorHom_def, comp_whiskerRight, whiskerLeft_comp, Category.assoc]
  slice_lhs 2 3 => rw [‚Üê whisker_exchange]
  simp

private lemma associator_naturality [CommutativeMonad T]
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    ((f‚ÇÅ ‚äó f‚ÇÇ) ‚äó f‚ÇÉ) ‚â´ (Œ±_ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom = (Œ±_ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ (f‚ÇÅ ‚äó f‚ÇÇ ‚äó f‚ÇÉ) := by
  simp only [tensorObj_def, tensorHom_def, whiskerRight_def, Monad.unit_dStr_right, whiskerLeft_def,
    Functor.id_obj, Monad.unit_dStr_left, comp_def, Functor.map_comp, Category.assoc,
    MonoidalCategory.comp_whiskerRight, Monad.rStr_mul_comm, Monad.rStr_naturality_id_right_assoc,
    whisker_assoc, rStr_rStr_assoc, Iso.map_inv_hom_id_assoc, tensor_whiskerLeft,
    Œº_naturality_assoc, Œº_naturality, Monad.assoc_symm, Functor.comp_obj, associator_def,
    Functor.mapIso_hom, Adjunction.toKleisli_map, Category.comp_id, whiskerRight_tensor,
    MonoidalCategory.whiskerLeft_comp, Monad.lStr_mul_comm, Monad.lStr_naturality_id_left_assoc,
    Œ∑_naturality_assoc, Œ∑_naturality, Iso.hom_inv_id_assoc, Monad.left_unit]
  congr 4
  simp_rw [‚Üê Category.assoc]
  congr 1
  simp_rw [Category.assoc, ‚Üê T.map_comp]
  congr 1
  simp only [Œº_naturality, Monad.lStr_rStr_assoc, Iso.map_inv_hom_id_assoc, Iso.inv_hom_id_assoc]
  congr 3
  slice_rhs 1 2 => rw [‚Üê T.map_comp, lStr_lStr]
  simp

instance [CommutativeMonad T] : MonoidalCategory (Kleisli T) where
  tensorHom_def _ _ := rfl
  tensor_id := by simp [tensorHom_def, wiskerLeft_id, id_whiskerRight]
  tensor_comp := Kleisli.tensor_comp
  whiskerLeft_id := by simp [id_def, whiskerLeft_def, tensorObj_def]
  id_whiskerRight := by simp [id_def, whiskerRight_def, tensorObj_def]
  associator_naturality := Kleisli.associator_naturality
  leftUnitor_naturality := by
    simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
      leftUnitor_def, rightUnitor_def, comp_def]
  rightUnitor_naturality := by
    simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
      leftUnitor_def, rightUnitor_def, comp_def]
  pentagon := by
    simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
      leftUnitor_def, rightUnitor_def, comp_def]
  triangle := by
    simp [associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def, tensorUnit_def,
      leftUnitor_def, rightUnitor_def, comp_def]

def braiding [BraidedCategory C] [CommutativeMonad T] (X Y : Kleisli T) :
    X ‚äó Y ‚âÖ Y ‚äó X :=
  (Adjunction.toKleisli T).mapIso (@BraidedCategory.braiding C _ _ _ X Y)

lemma braiding_def' [BraidedCategory C] [CommutativeMonad T] (X Y : Kleisli T) :
    Kleisli.braiding X Y
      = (Adjunction.toKleisli T).mapIso (@BraidedCategory.braiding C _ _ _ X Y) := rfl

instance [SymmetricCategory C] [SymmetricMonad T] : BraidedCategory (Kleisli T) where
  braiding := Kleisli.braiding
  braiding_naturality_right := by
    simp [braiding_def', associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def,
      tensorUnit_def, leftUnitor_def, rightUnitor_def, comp_def]
  braiding_naturality_left :=  by
    simp [braiding_def', associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def,
      tensorUnit_def, leftUnitor_def, rightUnitor_def, comp_def]
  hexagon_forward :=  by
    simp [braiding_def', associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def,
      tensorUnit_def, leftUnitor_def, rightUnitor_def, comp_def]
  hexagon_reverse :=  by
    simp [braiding_def', associator_def, whiskerRight_def, whiskerLeft_def, tensorObj_def,
      tensorUnit_def, leftUnitor_def, rightUnitor_def, comp_def]

lemma braiding_def [SymmetricCategory C] [SymmetricMonad T] (X Y : Kleisli T) :
    Œ≤_ X Y = (Adjunction.toKleisli T).mapIso (@BraidedCategory.braiding C _ _ _ X Y) := rfl

instance [SymmetricCategory C] [SymmetricMonad T] : SymmetricCategory (Kleisli T) where
  symmetry X Y := by
    simp only [tensorObj_def, braiding_def, Functor.mapIso_hom, Adjunction.toKleisli_map, comp_def,
      Functor.map_comp, Category.assoc, Œ∑_naturality_assoc, Œ∑_naturality,
      SymmetricCategory.symmetry_assoc, Monad.left_unit, Functor.id_obj, Category.comp_id]
    rfl

end Kleisli

end CategoryTheory
