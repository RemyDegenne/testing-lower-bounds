/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.CategoryTheory.Monad.Kleisli
import TestingLowerBounds.Kernel.Category.CommutativeMonad

/-!

# Categories of measurable spaces and Kernels

-/

open CategoryTheory MonoidalCategory

universe u v

namespace CategoryTheory

section Kleisli

variable {C : Type u} [Category.{v} C] {T : Monad C}

@[simp]
lemma todo {X Y : C} (f : X ‚ü∂ T.obj Y) :
    T.Œ∑.app X ‚â´ T.map f ‚â´ T.Œº.app Y = f := by
  have h := T.Œ∑.naturality f
  simp only [Functor.id_obj, Functor.id_map] at h
  rw [‚Üê Category.assoc, ‚Üê h, Category.assoc]
  simp

lemma Kleisli.comp_def {X Y Z : Kleisli T} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    f ‚â´ g = @CategoryStruct.comp C Category.toCategoryStruct _ _ _ f (T.map g) ‚â´ T.Œº.app Z := by
  simp only [Category.assoc]
  rfl

variable [MonoidalCategory C]

instance (T : Monad C) [Strong T] : MonoidalCategoryStruct (Kleisli T) where
  tensorObj X Y := (Kleisli.Adjunction.toKleisli T).obj (X ‚äó Y)
  whiskerLeft X Y‚ÇÅ Y‚ÇÇ f :=
    ((T.Œ∑.app X ‚äó f) ‚â´ T.dStr X Y‚ÇÇ : @tensorObj C _ _ X Y‚ÇÅ ‚ü∂ T.obj (X ‚äó Y‚ÇÇ))
  whiskerRight {X‚ÇÅ X‚ÇÇ} f Y :=
    ((f ‚äó T.Œ∑.app Y) ‚â´ T.dStr X‚ÇÇ Y : @tensorObj C _ _ X‚ÇÅ Y ‚ü∂ T.obj (X‚ÇÇ ‚äó Y))
  tensorUnit := (Kleisli.Adjunction.toKleisli T).obj (ùüô_ C)
  associator X Y Z := (Kleisli.Adjunction.toKleisli T).mapIso
    (@MonoidalCategoryStruct.associator C _ _ X Y Z)
  leftUnitor X := (Kleisli.Adjunction.toKleisli T).mapIso
    (@MonoidalCategoryStruct.leftUnitor C _ _ X)
  rightUnitor X := (Kleisli.Adjunction.toKleisli T).mapIso
    (@MonoidalCategoryStruct.rightUnitor C _ _ X)

@[simp]
lemma Kleisli.wiskerLeft_id [Strong T] {X Y : Kleisli T} :
    X ‚óÅ ùüô Y = ùüô (X ‚äó Y) := by
  suffices (T.Œ∑.app X ‚äó T.Œ∑.app Y) ‚â´ T.dStr X Y = T.Œ∑.app (X ‚äó Y) from this
  simp

@[simp]
lemma Kleisli.id_whiskerRight [Strong T] {X Y : Kleisli T} :
    ùüô X ‚ñ∑ Y = ùüô (X ‚äó Y) := by
  suffices (T.Œ∑.app X ‚äó T.Œ∑.app Y) ‚â´ T.dStr X Y = T.Œ∑.app (X ‚äó Y) from this
  simp

lemma Kleisli.tensorObj_def [Strong T] (X Y : Kleisli T) :
    X ‚äó Y = @tensorObj C _ _ X Y := rfl

@[simp]
lemma Kleisli.tensorHom_def [Strong T]
    {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : Kleisli T} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g: X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    f ‚äó g = (f ‚ñ∑ X‚ÇÇ) ‚â´ (Y‚ÇÅ ‚óÅ g) := rfl

lemma Kleisli.whiskerLeft_def [Strong T] (X : Kleisli T) {Y‚ÇÅ Y‚ÇÇ : Kleisli T} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
    X ‚óÅ f = (T.Œ∑.app X ‚äó f) ‚â´ T.dStr X Y‚ÇÇ := rfl

lemma Kleisli.whiskerRight_def [Strong T] {X‚ÇÅ X‚ÇÇ : Kleisli T} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : Kleisli T) :
    f ‚ñ∑ Y = ((f ‚äó T.Œ∑.app Y) ‚â´ T.dStr X‚ÇÇ Y : @tensorObj C _ _ X‚ÇÅ Y ‚ü∂ T.obj (X‚ÇÇ ‚äó Y)) := rfl

lemma Kleisli.tensorUnit_def [Strong T] :
    ùüô_ (Kleisli T) = (Kleisli.Adjunction.toKleisli T).obj (ùüô_ C) := rfl

lemma Kleisli.associator_def [Strong T] (X Y Z : Kleisli T) :
    Œ±_ X Y Z = (Kleisli.Adjunction.toKleisli T).mapIso
      (@MonoidalCategoryStruct.associator C _ _ X Y Z) := rfl

lemma Kleisli.leftUnitor_def [Strong T] (X : Kleisli T) :
    Œª_ X = (Kleisli.Adjunction.toKleisli T).mapIso
      (@MonoidalCategoryStruct.leftUnitor C _ _ X) := rfl

lemma Kleisli.rightUnitor_def [Strong T] (X : Kleisli T) :
    œÅ_ X = (Kleisli.Adjunction.toKleisli T).mapIso
      (@MonoidalCategoryStruct.rightUnitor C _ _ X) := rfl

@[simp]
lemma Kleisli.whiskerLeft_comp [Strong T] (X : Kleisli T) {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Kleisli T}
    (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) :
    X ‚óÅ (f ‚â´ g) = X ‚óÅ f ‚â´ X ‚óÅ g := by
  simp only [comp_def, Category.assoc, whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left,
    MonoidalCategory.whiskerLeft_comp, Functor.map_comp]
  slice_rhs 2 3 => rw [‚Üê T.lStr_naturality_id_left]
  simp only [Category.assoc]
  rw [T.lStr_mul_comm]
  rfl

@[simp]
lemma Kleisli.comp_whiskerRight [CommutativeMonad T] {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Kleisli T}
    (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) (X : Kleisli T) :
    (f ‚â´ g) ‚ñ∑ X = f ‚ñ∑ X ‚â´ g ‚ñ∑ X := by
  simp only [comp_def, Category.assoc, whiskerRight_def, Monad.unit_dStr_right, comp_whiskerRight,
    MonoidalCategory.comp_whiskerRight, Functor.map_comp]
  slice_rhs 2 3 => rw [‚Üê T.rStr_naturality_id_right]
  simp only [Category.assoc]
  rw [T.rStr_mul_comm]
  rfl

lemma Kleisli.whisker_exchange [CommutativeMonad T] {W X Y Z : Kleisli T}
    (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
    W ‚óÅ g ‚â´ f ‚ñ∑ Z = f ‚ñ∑ Y ‚â´ X ‚óÅ g := by
  simp only [whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left, whiskerRight_def,
    Monad.unit_dStr_right]
  simp only [comp_def, Functor.map_comp, ‚Üê Category.assoc]
  slice_rhs 2 3 => rw [‚Üê T.rStr_naturality_id_left]
  slice_rhs 1 2 => rw [‚Üê MonoidalCategory.whisker_exchange]
  slice_lhs 2 3 => rw [‚Üê T.lStr_naturality_id_right]
  simp only [Category.assoc]
  congr 2
  exact T.lStr_rStr_comm X Z

lemma todo' (X Y : C) :
    (Œ±_ X (ùüô_ C) Y).hom ‚â´ T.Œ∑.app (X ‚äó ùüô_ C ‚äó Y) ‚â´ T.map (X ‚óÅ (Œª_ Y).hom)
      = (œÅ_ X).hom ‚ñ∑ Y ‚â´ T.Œ∑.app (X ‚äó Y) := by
  have h := T.Œ∑.naturality
  simp only [Functor.id_obj, Functor.id_map] at h
  slice_lhs 2 3 => rw [‚Üê h]
  simp only [triangle_assoc]

namespace Kleisli

variable {W X Y Z X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ X‚ÇÉ Y‚ÇÉ Z‚ÇÉ : Kleisli T}

private lemma tensor_comp [CommutativeMonad T]
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
    f‚ÇÅ ‚â´ g‚ÇÅ ‚äó f‚ÇÇ ‚â´ g‚ÇÇ = (f‚ÇÅ ‚äó f‚ÇÇ) ‚â´ (g‚ÇÅ ‚äó g‚ÇÇ) := by
  simp only [tensorHom_def, comp_whiskerRight, whiskerLeft_comp, Category.assoc]
  slice_lhs 2 3 => rw [‚Üê whisker_exchange]
  simp

private lemma leftUnitor_naturality [CommutativeMonad T] (f : X ‚ü∂ Y) :
    ùüô_ (Kleisli T) ‚óÅ f ‚â´ (Œª_ Y).hom = (Œª_ X).hom ‚â´ f := by
  simp only [Kleisli.whiskerLeft_def, Monad.unit_dStr_left, Kleisli.leftUnitor_def,
    Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map, Kleisli.comp_def, Functor.map_comp,
    Category.assoc, Monad.right_unit, Category.comp_id]
  simp only [Kleisli.tensorUnit_def, Kleisli.Adjunction.toKleisli_obj, id_whiskerLeft,
    Category.assoc, Iso.cancel_iso_hom_left]
  slice_lhs 2 3 => rw [T.lStr_unit_comp Y]
  rw [‚Üê T.map_comp]
  simp

private lemma rightUnitor_naturality [CommutativeMonad T] (f : X ‚ü∂ Y) :
    f ‚ñ∑ ùüô_ (Kleisli T) ‚â´ (œÅ_ Y).hom = (œÅ_ X).hom ‚â´ f := by
  simp only [Kleisli.whiskerRight_def, Monad.unit_dStr_right, Kleisli.rightUnitor_def,
    Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map, Kleisli.comp_def, Functor.map_comp,
    Category.assoc, Monad.right_unit, Category.comp_id, todo]
  simp only [Kleisli.tensorUnit_def, Kleisli.Adjunction.toKleisli_obj,
    MonoidalCategory.whiskerRight_id, Category.assoc, Iso.cancel_iso_hom_left]
  slice_lhs 2 3 => rw [T.rStr_unit_comp Y]
  rw [‚Üê T.map_comp]
  simp

private lemma pentagon [CommutativeMonad T] (W X Y Z : Kleisli T) :
    (Œ±_ W X Y).hom ‚ñ∑ Z ‚â´ (Œ±_ W (X ‚äó Y) Z).hom ‚â´ W ‚óÅ (Œ±_ X Y Z).hom
      = (Œ±_ (W ‚äó X) Y Z).hom ‚â´ (Œ±_ W X (Y ‚äó Z)).hom := by
  simp only [Kleisli.associator_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
  simp only [Kleisli.whiskerRight_def, Kleisli.whiskerLeft_def, Functor.id_obj]
  simp only [Kleisli.tensorObj_def, Monad.unit_dStr_right, comp_whiskerRight, Category.assoc,
    Monad.rStr_unit_comm, Monad.unit_dStr_left, MonoidalCategory.whiskerLeft_comp,
    Monad.lStr_unit_comm, Kleisli.comp_def, Functor.map_comp, Monad.right_unit, Category.comp_id]
  simp only [MonoidalCategory.comp_whiskerRight]
  slice_lhs 2 3 => rw [Monad.rStr_unit_comm]
  simp only [Functor.id_obj, Functor.map_id, Category.id_comp,
    Category.assoc, Category.comp_id]
  have h := T.Œ∑.naturality
  simp only [Functor.id_obj, Functor.id_map] at h
  slice_rhs 2 3 => rw [‚Üê h]
  slice_lhs 1 2 => rw [h]
  slice_lhs 2 3 => rw [‚Üê T.map_comp]
  slice_lhs 2 3 => rw [‚Üê T.map_comp]
  rw [‚Üê T.map_comp]
  rw [todo]
  slice_lhs 3 4 => rw [‚Üê h]
  simp only [Functor.id_obj, Category.comp_id, pentagon_assoc]

private lemma triangle [CommutativeMonad T] (X Y : Kleisli T) :
    (Œ±_ X (ùüô_ (Kleisli T)) Y).hom ‚â´ X ‚óÅ (Œª_ Y).hom = (œÅ_ X).hom ‚ñ∑ Y := by
  simp only [Kleisli.associator_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map,
    Kleisli.leftUnitor_def, Kleisli.rightUnitor_def]
  simp only [Kleisli.tensorUnit_def, Kleisli.Adjunction.toKleisli_obj]
  simp only [Kleisli.whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left,
    MonoidalCategory.whiskerLeft_comp, Category.assoc, Monad.lStr_unit_comm, Kleisli.comp_def,
    Functor.map_comp, Kleisli.whiskerRight_def, Monad.unit_dStr_right, comp_whiskerRight,
    Monad.rStr_unit_comm]
  simp only [Kleisli.tensorObj_def, Monad.right_unit, Category.comp_id]
  simp only [Functor.id_obj, Category.comp_id, MonoidalCategory.comp_whiskerRight, Category.assoc,
    Monad.rStr_unit_comm]
  exact todo' (T := T) _ _

instance [CommutativeMonad T] : MonoidalCategory (Kleisli T) where
  tensor_comp := Kleisli.tensor_comp
  associator_naturality f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    simp only [Kleisli.associator_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
    simp only [Kleisli.tensorObj_def, Kleisli.tensorHom_def, Kleisli.comp_whiskerRight,
      Category.assoc, Kleisli.whiskerLeft_comp]
    simp only [Kleisli.whiskerRight_def, Monad.unit_dStr_right, comp_whiskerRight, Category.assoc,
      Kleisli.whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left, whisker_assoc,
      tensor_whiskerLeft, whiskerRight_tensor, MonoidalCategory.whiskerLeft_comp]
    simp only [Kleisli.comp_def, Functor.map_comp, Category.assoc, Monad.right_unit,
      Category.comp_id]
    simp only [Functor.id_obj, Functor.map_id, Category.id_comp]
    have h1 := T.Œ∑.naturality
    simp only [Functor.id_obj, Functor.id_map] at h1
    sorry
  leftUnitor_naturality := Kleisli.leftUnitor_naturality
  rightUnitor_naturality := Kleisli.rightUnitor_naturality
  pentagon := Kleisli.pentagon
  triangle := Kleisli.triangle

def braiding [BraidedCategory C] [CommutativeMonad T] (X Y : Kleisli T) :
    X ‚äó Y ‚âÖ Y ‚äó X :=
  (Kleisli.Adjunction.toKleisli T).mapIso (@BraidedCategory.braiding C _ _ _ X Y)

lemma braiding_def [BraidedCategory C] [CommutativeMonad T] (X Y : Kleisli T) :
    Kleisli.braiding X Y
      = (Kleisli.Adjunction.toKleisli T).mapIso (@BraidedCategory.braiding C _ _ _ X Y) := rfl

instance [SymmetricCategory C] [SymmetricMonad T] : BraidedCategory (Kleisli T) where
  braiding := Kleisli.braiding
  braiding_naturality_right X Y Z f := by
    simp only [Kleisli.braiding_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
    simp only [Kleisli.tensorObj_def, Kleisli.whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left,
      Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map, Kleisli.comp_def, Functor.map_comp,
      Category.assoc, Monad.right_unit, Category.comp_id, Kleisli.whiskerRight_def,
      Monad.unit_dStr_right]
    have hŒ∑ := T.Œ∑.naturality
    simp only [Functor.id_obj, Functor.id_map] at hŒ∑
    slice_rhs 2 3 => rw [‚Üê hŒ∑]
    slice_rhs 1 2 => rw [‚Üê BraidedCategory.braiding_naturality_right]
    simp
  braiding_naturality_left {X Y} f Z := by
    simp only [Kleisli.braiding_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
    simp only [Kleisli.tensorObj_def, Kleisli.whiskerRight_def, Monad.unit_dStr_right,
      Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map, Kleisli.comp_def, Functor.map_comp,
      Category.assoc, Monad.right_unit, Category.comp_id, Kleisli.whiskerLeft_def, Functor.id_obj,
      Monad.unit_dStr_left]
    have hŒ∑ := T.Œ∑.naturality
    simp only [Functor.id_obj, Functor.id_map] at hŒ∑
    slice_rhs 2 3 => rw [‚Üê hŒ∑]
    slice_rhs 1 2 => rw [‚Üê BraidedCategory.braiding_naturality_left]
    simp
  hexagon_forward X Y Z := by
    simp only [Kleisli.braiding_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
    simp only [Kleisli.tensorObj_def, Kleisli.associator_def, Functor.mapIso_hom,
      Kleisli.Adjunction.toKleisli_map, BraidedCategory.braiding_tensor_right, Category.assoc,
      Kleisli.comp_def, Functor.map_comp, Monad.right_unit, Category.comp_id,
      Kleisli.whiskerRight_def, Monad.unit_dStr_right, comp_whiskerRight, Monad.rStr_unit_comm,
      Kleisli.whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left,
      MonoidalCategory.whiskerLeft_comp, Monad.lStr_unit_comm]
    have hŒ∑ := T.Œ∑.naturality
    simp only [Functor.id_obj, Functor.id_map] at hŒ∑
    slice_lhs 1 2 => rw [hŒ∑]
    slice_lhs 2 3 => rw [‚Üê T.map_comp, Iso.hom_inv_id, Functor.map_id]
    simp only [Category.id_comp, Category.assoc]
    slice_lhs 5 6 => rw [‚Üê T.map_comp, hŒ∑, T.map_comp]
    slice_lhs 6 7 => rw [‚Üê T.map_comp, ‚Üê T.map_comp, Iso.inv_hom_id]
    simp only [Functor.map_id, Category.id_comp, Monad.right_unit, Category.comp_id]
    sorry
    -- simp_rw [‚Üê T.map_comp, ‚Üê @BraidedCategory.hexagon_forward C _ _ _ X Y Z]
    -- slice_rhs 1 2 => rw [hŒ∑]
    -- simp only [BraidedCategory.braiding_tensor_right, Category.assoc, Iso.inv_hom_id,
    --   Category.comp_id, Iso.hom_inv_id_assoc, Functor.map_comp]
    -- congr 3
    -- slice_rhs 1 2 => rw [‚Üê T.map_comp, ‚Üê hŒ∑]
    -- simp
  hexagon_reverse X Y Z := by
    simp only [Kleisli.braiding_def, Functor.mapIso_hom, Kleisli.Adjunction.toKleisli_map]
    simp only [Kleisli.tensorObj_def, Kleisli.associator_def, Functor.mapIso_inv,
      Kleisli.Adjunction.toKleisli_map, Functor.mapIso_hom, BraidedCategory.braiding_tensor_left,
      Category.assoc, Kleisli.comp_def, Functor.map_comp, Monad.right_unit, Category.comp_id,
      Kleisli.whiskerLeft_def, Functor.id_obj, Monad.unit_dStr_left,
      MonoidalCategory.whiskerLeft_comp, Monad.lStr_unit_comm, Kleisli.whiskerRight_def,
      Monad.unit_dStr_right, comp_whiskerRight, Monad.rStr_unit_comm]
    have hŒ∑ := T.Œ∑.naturality
    simp only [Functor.id_obj, Functor.id_map] at hŒ∑
    slice_lhs 1 2 => rw [hŒ∑]
    slice_lhs 2 3 => rw [‚Üê T.map_comp, Iso.inv_hom_id, Functor.map_id]
    simp only [Category.id_comp, Category.assoc]
    slice_lhs 5 6 => rw [‚Üê T.map_comp, hŒ∑, T.map_comp]
    slice_lhs 6 7 => rw [‚Üê T.map_comp, ‚Üê T.map_comp, Iso.hom_inv_id]
    simp only [Functor.map_id, Category.id_comp, Monad.right_unit, Category.comp_id]
    sorry
    -- simp_rw [‚Üê T.map_comp, ‚Üê @BraidedCategory.hexagon_reverse C _ _ _ X Y Z]
    -- slice_rhs 1 2 => rw [hŒ∑]
    -- simp only [BraidedCategory.braiding_tensor_left, Category.assoc, Iso.hom_inv_id,
    --   Category.comp_id, Iso.inv_hom_id_assoc, Functor.map_comp]
    -- congr 3
    -- slice_rhs 1 2 => rw [‚Üê T.map_comp, ‚Üê hŒ∑]
    -- simp

instance [SymmetricCategory C] [SymmetricMonad T] : SymmetricCategory (Kleisli T) where
  symmetry X Y := by
    simp only [Kleisli.tensorObj_def, Kleisli.braiding_def, Functor.mapIso_hom,
      Kleisli.Adjunction.toKleisli_map, Kleisli.comp_def, Functor.map_comp, Category.assoc,
      Monad.right_unit, Category.comp_id]
    sorry
    -- rw [‚Üê T.Œ∑.naturality]
    -- simp only [Functor.id_obj, Functor.id_map, SymmetricCategory.symmetry_assoc]
    -- rfl

end Kleisli

end Kleisli

end CategoryTheory
